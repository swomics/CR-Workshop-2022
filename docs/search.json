[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "¡Bienvenido!",
    "section": "",
    "text": "Welcome to the 2022 Genomics workshop!\nby Samuel Whiteford & Stefany Solano-Gonzalez\nDuring this course we aim to cover some important bioinformatic methods and give you the following skills and knowledge:\n\nYou will understand the importance of sampling and experimental design in genome sequencing experiments.\nYou will understand the difference between DNA sequencing technologies, their advantages and disadvantages and will have some understanding of how to check for problems in your data.\nYou will be able to navigate a Unix environment and understand how to access and run various bioinformatics packages.\nYou will be able to analyse and annotate a single genomic sequence to facilitate further studies and address specific hypotheses.\nYou will be able to compare different species to address specific hypotheses."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Day1.html",
    "href": "Day1.html",
    "title": "Day 1",
    "section": "",
    "text": "Today we will be discussing and performing Genome assembly. Assembly refers to the translation of raw sequencing data into a representation of the source DNA genome. You will learn about the types of data and algorithms you can use to accomplish this, their advantages and disadvantages. Since this is the first day of the workshop, we will also need some time to get comfortable running software on the computing facility.\n\n\n\n\n\n\nI have included some questions for the first day. This is not a test! They are just to help us check whether important information is missing and to create opportunities to ask for help."
  },
  {
    "objectID": "k-means/app.html",
    "href": "k-means/app.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "title: “Old Faithful”\nformat:\nhtml:\ncode-tools:\nsource: https://github.com/quarto-dev/quarto-web/tree/main/docs/interactive/shiny/_examples/old-faithful/shiny-old-faithful.qmd\nserver: shiny\n---\nData on eruptions of the Old Faithful geyser in Yellowstone National Park,\nWyoming, USA. The data was collected continuously from August 1st until\nAugust 15th, 1985.\n```{r}\nsliderInput(“bins”, “Number of bins:”, min = 1, max = 50, value = 30)\nplotOutput(“distPlot”)\n```\nThe data consists of 299 pairs of measurements, referring to the time interval\nbetween the starts of successive eruptions and the duration of the subsequent\neruption.\nClick the **Code** button above to see the source code for this example.\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\nx <- faithful[, 2] # Old Faithful Geyser data\nbins <- seq(min(x), max(x), length.out = input$bins + 1)\nhist(x, breaks = bins, col = ‘darkgray’, border = ‘white’)\n})\n```"
  },
  {
    "objectID": "k-means/app_test.html",
    "href": "k-means/app_test.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "title: “Old Faithful”\nformat: html\nserver: shiny\n---\n```{r}\nsliderInput(“bins”, “Number of bins:”,\nmin = 1, max = 50, value = 30)\nplotOutput(“distPlot”)\n```\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\nx <- faithful[, 2] # Old Faithful Geyser data\nbins <- seq(min(x), max(x), length.out = input$bins + 1)\nhist(x, breaks = bins, col = ‘darkgray’, border = ‘white’)\n})\n```"
  },
  {
    "objectID": "Day1.html#logging-on-to-the-computing-environment",
    "href": "Day1.html#logging-on-to-the-computing-environment",
    "title": "Day 1",
    "section": "1. Logging on to the computing environment",
    "text": "1. Logging on to the computing environment\nPlease read through the Kabré user guide. You will need to submit the commands in this tutorial using SLURM scripts.\nA SLURM script contains some parameters for the program you wish to run, and can also allocate your “job” to different types of computer. The “partition” (the types of computers available) you choose is important. For most tasks, something like nu-wide would be suitable, since they have moderate RAM size and CPU number. For very computationally difficult tasks such as genome assembly, dribe-long would be more suitable. This is because genome assembly often requires large amounts of memory and high numbers of CPUs to complete in a reasonable time-frame.\n\n\n\n\n\n\nSince there are many people in the workshop, who will try to submit jobs at the same time, we are likely to have issues with jobs taking a long time to finish. I will try to provide access to all the data required in the folder /home/taller-2019/Workshop_materials/. I will also try to provide access to the expected results files. I have included URL links within the explanatory text, which links to the primary literature. Reading further might be worth doing, if you are interested in the methodological details.\n\n\n\n\n\n\nYou can check which jobs are “queued” and which partitions are very busy, with the command:\nsqueue\nTo submit your own script. You can write a new SLURM script for a specific program command, like this:\nnano example_script.slurm\nHere’s an example script, which has some queue parameters (#SBATCH), loading the correct programs (module load), and then the program command itself (srun …):\n#!/bin/bash\n#SBATCH --job-name=pi_threads\n#SBATCH --output=result.txt\n#SBATCH --partition=nu-wide\n#SBATCH --ntasks=1\n#SBATCH --time=00:10:00\n\nmodule load example_module\n\nsrun example_program -p example_parameter\nYou can then save and close the script with Ctrl + X, followed by Y. Then you can run the script like so:\nsbatch example_script.slurm\nYou may need to find the appropriate module for your command, by running:\nmodule avail\nOnce you find the correct module for the command you wish to run, you would copy it from this list into your SLURM script, like so:\nmodule load jellyfish/2.3.0"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-platforms-formats",
    "href": "Day1.html#dna-sequence-data-platforms-formats",
    "title": "Day 1",
    "section": "2. Platforms & Formats",
    "text": "2. Platforms & Formats\nThe ultimate goal of whole genome sequencing is to reconstruct the genetic state within an organism, exactly as it occurs in vivo. This means the complete uninterrupted base-pair sequence of any chromosomes, including mitochondrial genomes and potentially any endosymbiotic organisms. At the time of writing, the best technology we have can only “read” DNA molecules in continuous sections of varying lengths (and with varying accuracy). These sub-samples of larger genome molecules can be reconstructed to describe the larger sequence, this is called de novo genome assembly.\nThe data properties of these DNA “sequencing reads” depends on the technology used to generate them. DNA sequencing technology has been subject to many different fundamental technical advances. Broadly speaking, as of 2022, there are three dominant platforms, which differ by three key parameters 1) cost per base-pair 2) error-profile and 3) read-length\nSequencing by synthesis (Illumina)\n\nSingle molecule real-time (PacBio)\n\nNanopore sensing (Oxford Nanopore Technologies)\n\nThe field is constantly changing, but in recent years, Illumina paired reads have been considered accurate and cheap, however due to their short lengths, they are more suitable for population-level SNP and small indel variant detection, than genome assembly. PacBio and Nanopore reads in the recent past were much longer than Illumina reads, but had high error rates, and could be expensive. These reads were considered better for genome assembly projects, sometimes in combination with more accurate Illumina reads (a.k.a hybrid assembly). Currently, PacBio and Nanopore reads have improved considerably in quality, however remain expensive options. The combination of long read length and high accuracy is the most appropriate data for genome assembly. Novel DNA preparation techniques such as “haplotagging” are likely to prolong the advantages of Illumina reads, by enabling the detection and long-range linkage of SNPs.\nBelow you can see an interactive plot of different data sets in the Sequence Read Archive (SRA), highlighting differences in read length produced by the different platforms. A recent review of genome assemblies for Lepidopteran (butterfly/moth) genomes suggested that PacBio HiFi data is currently the best performing approach for assembly. We will come back to this later in the assembly section.\n\nFigure 1: A comparative overview of different DNA sequencing technologies (restricted to Order: Lepidoptera datasets)\n\n\n\n\n\n\nLet’s have a look at some public data from the Sequence Read Archive (SRA). We’ll be using E. coli bacteria, because it has a small genome size and is therefore has a lower computational burden, but the general principles we’ll explore can be applied to other organisms (with some caveats).\nTypically you could download the reads associated with an SRA accession using the commands below, but it can take some time, so today you can access pre-downloaded data from the path /home/taller-2019/Workshop_materials/.\n# Illumina HiseqX\nfasterq-dump SRR18106304\n# PacBio HiFi\nfasterq-dump SRR10971019\n# Oxford Nanopore R9\nfasterq-dump ERR1674581\nThese commands should download the “fastq” formatted data from these experiments, if you want to find out more about the experiment you can search the accession code (e.g. SRR18106304) on https://www.ncbi.nlm.nih.gov/.\n\n\nQ1:\nA. What organism are these datasets derived from?\nB. What platform was used for each dataset?\nC. Which organisations submitted each dataset?\nD. Which type of data is most suitable for genome assembly?\nE. Which type of data is the cheapest for detecting polymorphisms?\nLet’s have a quick look at the different data types using the “head” command. First, we have some Illumina data, by previewing the first 4 lines of the read fastq file:\n##Bash/command line code\nhead -n 4 SRR18106304.fastq\nHere we can see single-ended (unpaired) Illumina reads. The first line contains the read ID and the read length. The second line shows the base-pair sequence. The third line and fourth line show the base “quality” information (an estimate of the accuracy)\n@SRR18106304.1 1 length=150\nGNTGATTGCTGTTTGCCGCTTTATCCCACGCATATTGCTGAACCTGTGGCATCACCGTGGACTTCAACTGCGCTTTTTTCAGCAACGTCATGGTTAAGACGTTTGCCACCGCATCTGCCAGTGGAGACTCCGGTGTATCGAGGATCAGGC\n+SRR18106304.1 1 length=150\nF#FFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFF\nNow let’s have a look at some PacBio HiFi data, by previewing the first 4 lines of the read fastq file:\n##Bash/command line code\nhead -n 4 SRR10971019.fastq\nHere we can see much more data, due to the much greater read length.\n@SRR10971019.1 1 length=15748\nTTGACCGATTGAGGTTTCCTATAGGTATTCATTCAAATATATCTCAGTTAGGAGTACTACTATTGTGAGTAAACGTCGTTATCTTACCGGTAAAGAAGTTCAGGCCATGATGCAGGCGGTTTGTTACGGGGCAACGGGAGCCAGAGATTATTGTCTTATTCTGTTGGCATATCGGCATGGGATGCGTATTAGTGAACTGCTTGATCTGCATTATCAGGACCTTGACCTTAATGAAGGTAGAATAAATATTCGCCGACTGAAGAACGGATTTTTCTACCGTTCACCCGTTACGTTTTGATGAGCGTGAAGCCGTGGAACGCTGGACCCAGGAACGTGCCTAACTGGAAAGGCGCTGACCGGACTGACGCTATATTTATTTCTCGCCGCGGGAGTCGGCTTTCTCGCCAGCAGGCCTATCGCATTATTCGCGATGCCGGTATTGAAAGCTGGAACCGTAACGCAGACTCATCCTCATATGTTAAGGCATGCTTGCGGTTATGAATTGGCGGAGCGTGGTGCAGATACTCGTTTAATTCAGGATTATCTCGGGCATCGAAATATTCGCCATACTGTGCGTTATACCGCCAGTTAATGCTGCTCGTTTTGCCGGATTATGGGAAAGAAATAATCTCATAAACGAAAAATTAAAAAGAGAAGAGGTTTGATTTAACTTATTGATAATAAAGTTAAAAAAACAAATAAATACAAGACAATTGGGGCCAAACTGTCCATATCATAAATAAGTTACGTATTTTTTCTCAAGCATAAAAATATTAAAAAACGACAAAAAGCATCTAACTGTTTGATATGTAAATTATTTCTATTGTAAATTAATTTCACATCACCTCCGCTATATGTAAAGCTAACGTTTCTGTGGCTCGACGCATCTTCCTCATTCTTCTCTCCAAAAACCACCTCATGCAATATAAACATCTATAAATAAAGATAACAATAGAATATTAAGCCAACAAATAAACTGAAAAAGTTTGTCCGCGATGCTTTCCTCTATGAGTCAAAATGGCCCCAAATGTTTCATCTTTTGGGGGAAAACTGTGCAGTGTTGGCAGTCAAACTCGTTTACAAAACAAAGTGTACAGAACGACTGCCCATGTCGATTTAGAAATAGTTTTTTGAAAGGAAAGCAGCATGAAAATTAAAACTCTGGCAATCGTTGTTCTGTCGGCTCTGTCCCTCAGTTCTACAGCGGCTCTGGCCGCTGCCACGACGGTTAATGGTGGGACCGTTCACTTTAAAGGGGAAGTTGTTAACGCCGCTTGCGCAGTTGATGCAGGCTCTGTTGATCAAACCGTTCAGTTAGGACAGGTTCGTACCGCATCGCTGGCACAGGAAGGAGCAACCAGTTCTGCTGTCGGTTTTAACATTCAGCTGAATGATTGCGATACCAATGTTGCATCTAAAGCCGCTGTTGCCTTTTTAGGTACGGCGATTGATGCGGGTCATACCAACGTTCTGGCTCTGCAGAGTTCAGCTGCGGGTAGCGCAACAAACGTTGGTGTGCAGATCCTGGACAGAACGGGTGCTGCGCTGACGCTGGATGGTGCGACATTTAGTTCAGAAACAACCCTGAATAACGGAACCAATACCATTCCGTTCCAGGCGCGTTATTTTGCAACCGGGGCCGCAACCCCGGGTGCTGCTAATGCGGATGCGACCTTCAAGGTTCAGTATCAATAACCTACCCAGGTTCAGGGACGTCATTACGGGCAGGGATGCCCACCCTTGTGCGATAAAAATAACGATGAAAAGGAAGAGATTATTTCTATTAGCGTCGTTGCTGCCAATGTTTGCTCTGGCCGGAAATAAATGGAATACCACGTTGCCCGGCGGAAATATGCAATTTCAGGGCGTCATTATTGCGGAAACTTGCCGGATTGAAGCCGGTGATAACAAATGACGGTCAATATGGGGCAAATCAGCAGTAACCGGTTTCATGCGGTTGGGGAAGATAGCGCACCGGTGCCTTTTGTTATTCATTTACGGGAATGTAGCACGGTGGTGAGTGAACGTGTAGGTGTGGCGTTTCACGGTGTCGCGGATGGTAAAAATCCGGATGTGCTTTCCGTGGGAGAGGGGCCAGGGATAGCCACCAATATTGGCGTAGCGTTGTTTTGATGATGAAGGAAACCTCGTACCGATTAATCGTCCTCCAGCAAACTGGAAACGGCTTTATTCAGGCTCTACTTCGCTACATTTCATCGCCAAATATCGTGCTACCGGGCGTCGGGTTACTGGCGGCATCGCCAATGCCCAGGCCTGGTTCTCTTTAACCTATCAGTAATTGTTCAGCAGATAATGTGATAACAGGAACAGGACAGTGAGTAATAAAAACGTCAATGTAAGGAAATCGCAGGAAATAACATTCTGCTTGCTGGCAGGTATCCTGATGTTCATGGCAATGATGGTTGCCGGACGCGCTGAAGCGGGAGTGGCCTTAGGTGCGACTCGCGTAATTTATCCGGCAGGGCAAAAACAAGAGCAACTTGCCGTGACAAATAATGATGAAAATAGTACCTATTTAATTCAATCATGGGTGGAAAATGCCGATGGTGTAAAGGATGGTCGTTTTATCGTGACGCCTCCTCTGTTTGCGATGAAGGGAAAAAAAGAGAATACCTTACGTATTCTTGATGCAACAAATAACCAATTGCCACAGGACCGGGAAAGTTTATTCTGGATGAACGTTAAAGCGATTCCGTCAATGGATAAATCAAAATTGACTGAGAATACGCTACAGCTCGCAATTATCAGCCGCATTAAACTGTACTATCGCCCGGCTAAATAGCGTTGCCACCCGATCAGGCCGCAGAAAAATTAAGATTTCGTCGTAGCGCGAATTCTCTGACGCTGATTAACCCGACACCCTATTACCTGACGGTAACAGAGTTGAATGCCGGAACCCGGGTTCTTGAAAATGCATTGGTGCCTCCAATGGGCGAAAGCACGGTTAAATTGCCTTCTGATGCAGGAAGCAATATTACTTACCGAACAATAAATGATTATGGCGCACTTACCCCCAAAATGACGGGCGTAATGGAATAACGCAGGGGGAATTTTTCGCCTGAATAAAAAGAATTGACTGCCGGGTGATTTTAAGCCGGAGGAATAATGTCATATCTGAATTTAAGACTTTACCAGCGAAACACACAATGCTTGCATATTCGTAAGCATCGTTTGGCTGGTTTTTTTGTCCGACTCGTTGTCGCCTGTGCTTTTGCCGCACAGGCACCTTTGTCATCTGCCGACCTCTATTTTAATCCGCGCTTTTTAGCGGATGATCCCCAGGCTGTGGCCGATTTATCGCGTTTTGAAAATGGGCAAGAATTACCGCCAGGGACGTATCGCGTCGATATCTATTTGAATAATGGTTATATGGCAACGCGTGATGTCACATTTAATACGGGCGACAGTGAACAAGGGATTGTTTCCCTGCCTGACACGCGCGCAACTCGCCAGTATGGGGCTGAATACGGCTTCTGTCGCCGGTATGAATCTGCTGGCGGATGATGCCTGTGTGCCATTAACCACAATGGTCCAGGACGCTACTGCGCATCTGGATGTTAGGTCAGCAGCGACTGAACCTGACGATCCCTCAGGCATTTATGAGTAATCGCGCGCGTGGTTATATTCCTCCTGAGTTATGGGATCCCGGTATTAATGCCGGATTGCTCAATTATAATTTCAGCGGAAATAGTGTACAGAATCGGATTGGGGGTAACAGCCATTATGCATATTTAAACCTACAGAGTGGGTTAAATATTGGTGCGTGGCGTTTACGCGACAATACCACCTGGAGTTATAACAGTAGCGACAGATCATCAGGTAGCAAAAATAAATGGCAGCATATCAATACCTGGCTTGAGCGAGACATAATACCGTTACGTTCCCGGCTGACGCTGGGTGATGGTTATACTCAGGGCGATATTTTCGATGGTATTAACTTTCGCGGCGCACAATTGGCCTCAGATGACAATATGTTACCCGATAGTCAAAGAGGATTTGCCCCCGGTGATCCACGGTATTGCTCGTGGTACTGCACAGGTCACTATTAAACAAAATGGGTATGACATTTATAATAGTACGGTGCCACCGGGGCCTTTTACCATCAACGATATCTATGCCGCAGGTAATAGTGGTGACTTGCAGGTAACGATTCAAAGAGGCTGACGGCAGCACGCAGATTTTTACCGTACCCTATTCGTCAGTCCCGCTTTTGCAACGTGAAGGGCATACTCGTTATTCCATTACGGCAGGAGAATACCGTAGTGGAAATGCGCAGCAGGAAAAAACCCGCTTTTTCCAGAGTACATTACTCCACGGCCTTCCGGCTGGCTGGACAATATATGGTGGAACGCAACTGGCGGATCGTTATCGTGCTTTTAATTTCGGTATCGGGAAAAACATGGGGGCACTGGGCGCTCTGTCTGTGGATATGACGCAGGCTAATTCCACACTTCCCGATGACAGTCAGCATGACGGACAATCGGTGCGTTTTCTCTATAACAAATCGCTCAATGAATCAGGCACGAATATTCAGTTAGTGGGTTACCGTTATTCGACCAGCGGATATTTTAATTTCGCTGATACAACATACAGTCGAATGAATGGCTACAACATCGAAACACAGGACGGAGTTATTCAGGTTAAGCCGAAATTCACCGACTATTACAACCTCGCTTATAACAAACGCGGGAAATTACAACTCACCGTTACTCAGGCAACTCGGGCGCACATCAACACTGTATTTGAGTGGTAGCCATCAAACTTATTGGGGAACGAGTAATGTCGATGAGCAATTCCAGGCTGGATTAAATACTGCGTTCGAAGATATCAACTGGACGCTCAGCTATAGCCTGACGAAAAACGCCTGGCAAAAAGGACGGGATCAGATGTTAGCGCTTAACGTCAATATTCCTTTCAGCCACTGGCTGCGTTCTGACAGTAAATCTCAGTGGCGACATGCCAGTGCCAGCTACAGCATGTCACACGATCTCAACGGTCGGATGACCAATCTGGCTGGTGTATACGGTACGTTGCTGGAAGACAACAACCTCAGCTATAGCGTGCAAACCGGCTATGCCGGGGGAGGCGATGGAAATAGCGGAAGTACAGGCTACGCCACGCTGAATTATCGCGGTGGTTACGGCAATGCCAATATCGGTTACAGCCATAGCGATGATATTAAGCAGCTCTATTACGGAGTCAGCGGTGGGGTACTGGCTCATGCCAATGGCGTAACGCTGGGGCAGCCGTTAAACGATACGGTGGTGCTTGTTAAAGCGCCTGGCGCAAAAGATGCAAAAGTCGAAAACCAGACGGGGGTGCGTACCGACTGGCGTGGTTATGCCGTGCTGCCTTATGCCACTGAATATCGGGAAAATAGAGTGGCGCTGGATACCAATACCCTGGCTGATAACGTCGATTTAGATAACGCGGTTGCTAACGTTGTTCCCACTCGTGGGGCGATCGTGCGAGCAGAGTTTAAAGCGCGCGTTGGGATAAAACTGCTCATGACGCTGACCCACAATAATAAGCCGCTGCCGTTTGGGGCGATGGTGACATCAGAGAGTAGCCAGAGTAGCGGCATTGTTGCGGATAATGGTCAGGTTTACCTCAGCGGAATGCCTTTAGCGGGAAAAGTTCAGGTGAAATGGGGAGAAGAGGAAAATGCCTCACTGTGTCGCCAATTATCAACTGCCACCAGAGAGTCAGCAGCAGTTATTAACCCAGCTATCAGCTGAATGTCGTTAAGGGGGCGTGATGAGAAACAAACCTTTTTATCTTCTGTGCGCTTTTTTGTGGCTGGCGGTGAGTCACGCTTTGGCTGCGGATAGCACGATTACTATCCGCGGCTATGTCAGGGATAACGGCTGTAGTGTGGCCGCTGAATCAACCAATTTTACTGTTGATCTGATGGAAAACGCGGCGAAGCAATTTAACAACATTGGCGCGACGACTCCTGTTGTTCCAATTTCGTATTTTGCTGTCACCCTGTGGTAATGCCGTTTCTGCCGTAAAGGTTGGGTTTACTGGCGTTGCAGATAGCCACAATGCCAACCTGCTTGCACTTGAAAATACGGTGTCAGCGGCTTCGGGACTGGGAATACAGCTTCTGAATGAGCAGCAAAATCAAATACCCCTTAATGCTCCATCGTCCGCGCTTTCGTGGACGACCCTGACGCCGGGTAAAACCAAATACGCTGAATTTTTACGCCCGGCTAATGGCGACACAGGTGCCTGTCACTGCGGGGCATATCAATGCCACGGCTACCTTCACTCTTGAATATCAGTAACTGGAGATGCTCATGAAATGGTGCAAACGTGGGTATGTATTGGCGGCAATATTGGCGCTCGCAAGGTGCGACGATACAGGCAGCCGATGTCACCATCACGGTGAACGGTAAGGTCGTCGCCAAACCGTGTACGGTTTCCACCACCAATGCCACGGTTGATCTCGGCGATCTTTATTCTTTCAGTCTTATGTCTGCCGGGGCGGCATCGGCCTGGCATGATGTTGCGCTTGAGTTGACTAATTGTCCGGTGGGAACGTCGAGGGTCACTGCCAGCTTCAGCGGGGCAGCCGACAGTACCGGATATTATAAAAACCAGGGGACCGCGCAAAACATCCAGTTAGAGCTACAGGATGACAGTGGCAACACATTGAATACTGGCGCAACCAAAACAGTTCAGGTGGATGATTCCTCACAATCAGCGCACTTCCCGTTACAGGTCAGAGCATTGACAGTAAATGGCGGAGCCACTCAGGGAACCATTCAGGCAGTGATTAGCATCACCTATACCTACAGCTGAACCCGAAGAGATGATTGTAATGAAACGAGTTATTACCCTGTTTGCTGTACTGCTGATGGGCTGGTCGGTAAATGCCTGGTCATTCGCCTGTAAAACCGCCAATGGTACCGCTATCCCTATTGGCGGTGGCAGCGCCAATGTTTATGTAAACCTTGCGCCCGTCGTGAATGTGGGGCAAAACCTGGTCGTGGATCTTTCGACGCAAATCTTTTGCCATAACGATTATCCGGAACCATTACAGACTATGTCACACTGCAACGAGGCTCGGCTTATGGCGGCGTGTTATCTAATTTTTCCGGGACCGTAAAATATAGTGGCAGTAGCTATCCATTTCCTACCACCAGCGAAACGCCGCGCGTTGTTTATAATTCGAGAACGGATAAGCCGTGGCCGGTGGCGCTTTATTTGACGCCTGTGAGCAGTGCGGGCGGGGTGGCGATTAAAGCTGGCTCATTAATTGCCGTGCTTATTTTGCGACAGACCAACAACTATAACAGCGATGATTTCCAGTTTGTGTGGAATATTTACGCCAATAATGATGTGGTGGTGCCTACTGGCGGCTGCGATGTTTCTGCTCGTGATGTCACCGTTACTCTGCCGGACTACCCTGGTTCAGTGCCAATTCCTCTTACCGTTTATTGTGCGAAAAGCCAAAACCTGGGGTATTACCTCTCCGGCACAACCGCAGATGCGGGCAACTCGATTTTCACCAATACCGCGTCGTTTTCACCTGCACAGGGCGTCGGCGTACAGTTGACGCGCAACGGTACGATTATTCCAGCGAATAACACGGTATCGTTAGGAGCAGTAGGGACTTCGGCGGTGAGTCTGGGATTAACGGCAAATTATGCACGTACCGGAGGGCAGGTGACTGCAGGGAATGTGCAATCGATTATTGGCGTGACTTTTGTTTATCAATAAAGAAATCACAGGACATTGCTAATGCTGGTACGCATATTACCTGAAGCTAAAAACCTGCACGTTAGCCCTTTGTAGGCCAGATAAGACGCGTCAGCGTCGCATCTGGCATAAACAAAGCGCACTTTGCTGGTCTGTTCCCCTCACCCTAACCCTCTCCCCGGAGGGGCGAGGGGACTGTCCGGGCACATTTTTAGACTTTGTCATCAGTCTGAGCCTGCCATTGGCAGGCTCTGGTGTCCTTTTACGCTACCATGCTAATAATCAGCACAATAATCAGCCCAACCACGGAGTTGACCAGCTCCAGCAGACCCAGGTTTTCAACGTGTCTTTACTGACAGGTCAAAGTAACCTTTGAACAACCAGAAAGATGCACGTTAATGTGGGTGAGGGTGTTGGAACCCGCAGCCGTCGCCAGTACAGCAGCGCCGGATTCACGCCAACCAGCTGACCAGTTGCTGGATTCTAGGATTGCAGCACTGATAATCCCGGCGGCGGTCATCGCCGAAACGACACCCTGACCCGTCGCCAGACGAATTAGCACAGTGATCAGCCATGCCATGATGTAGGGCGAGATATTGCCGTGGGACATCAACATGCCGATGGTGTCGCCAATGCCGGTGTCGATGATGGTCTGCTTCAGCACGCCACCCGCACCGATGATCAGAATCACCATTGCAATACTCTTCACCGCGCTTTCAAAAGCGTTCATCACCCACTGCATGTCATGACCACGTGCGGTGCCAAGAGTACGAATGCAACCACCATCGCAATAAACATTGCAATCGGCGAGGAACCGATAAAGTTAACACTTCCCAGGCAGGGGTATCTTTTACCAGCCAGATATTGGCGATGGTGGTAGAGATCATAATGATCGCCGGGATCAGCGGCACCAGAATCGAAACGCCGAAAGAGGGCAGATTATTCATATCTACCGGTTGATCTGCTTTCAGGAATGATGGCGTTGGGCGCTCAAGATTGCCGAGGAACTTCGGCAGGATCAGACTCTGCGCAGATTACACTTGGGATCGTCACCAGTACGCCATAGATATAAACCATCCCCATATCCGCGCCATAAGCATTCACCAGCGCCACCGGACCCGGCTGCGGTGGGAACAGTGAATGTGCGGTAGTGGCAGCTGCTACTGCCGGATCGCCAGTTTCAGGAACGGAATTTTAGCTTCGGCGGCAATAACAATAACCAGCGGCGCTAACATGATAAAGGCCACTTCATAGAACATCGCCAGACCAAAAATCAGGCCGATGATAATCACCGACAGCTGTACATAGGCGCAGACCGAGACGCGCCAGCAGCGTATGCGCTATCTGGTGAGCCGCGCCGGAGTCGACCATCAATTTACCGATGGACCGCACCGAACACCACGATGATAGCCAGTTCCCCCAGCGTGTTGTTGCCGAAGCCCGCTTTCATAGTGTGCAGCAGCGACATCAAATCCATGCCCGCCAGCATCCCGACGGACAGCGCCGCCACCAACAAAGCCACCATTGAATTGATTTTGAACTTCAAATTCAGTACCAGCATCAGACCAATGCCGAATACCACCCAGAGAATGTTAAGCACATGCATAACGTTTTACCTTACCTGGTTGAACCGTTGTTATTTGGGCGATATGTTATGTAAATTGGTCAACCATTGTTGCGATGAATGTCACATCCTCTGATCAATAACCATCGATTACCCTTTGCTGCAATTTGCAGCAACAACCATGAGAGTGAAATTCTTGTGATGTGGTTAACCAATTTCAGAATTCGGGTTGACATGTCTTACCAAAAGGTAGAACTTATACGCCATCTCATCCGATGCAACGCCACGGCTGCGGTCTGGTTGTTCATCCGGATACCTAAACAACTCCAGGGTTCCGCGTCTCTTTGCTGTGGAACCCACTATGTGAAAGAGGAAAAATCATGGAACAGACCTGGCGCTGGTACGGCCCAAACGATCCGGTTTCTTTAGCTGATGTCCGTCAGGCGGGCGCAACTGGCGTGGTTACCGCGCTGCACCATATCCCGAACGGCGAAGTATGGTCCGTTGAAGAGATCCTCAAACGCAAGGCGATCATTGAAGACGCAGGCCTGGTGTGGTCTGTCGTAGAAAGCGTGCCAATTCACGAAGATATCAAAACCCACACTGGCAACTATGAGCAGTGGATCGCTAACTATCAGCAGACTCTGCGCAACCTGGCGCAGTGTGGCATTCGCACCGTGTGCTACAACTTCATGCCGGTGCTCGACTGGACCCGTACTGACCTCGAATACGTGCTGCCAGACGGCTCCAAAGCTCTGCGCTTCGACCAGATCGAATCGCTGCATTCGAAATGCATATCCTGAAACGCCCAGGCGCGGAAGCGGATTACACCGAAGAAGAAATTGCTCAGGCAGCTGAACGCTTCGCCACTATGAGCGATGAAGACAAAGCGCGTCTGACCCGTAACATCATTGCTGGTCTTCCGGGCGCGGAAGAAGGCTACACCCTCGACAGTTCCGTAAACACCTGGAGCTGTACAAAGATATCGACAAAGCGAAGCTGCGCGAAAACTTTGCCGTCTTCCTGAAAGCGATTATTCCAGTTGCTGAAGAAGTCGGCGTGCGTATGGCTGTTCACCCGGACGATCCGCCGCGCCCGATCCTCGGCCTGCCGCGCATTGTTTCCACCATTGAGATATGCAGTGGATGGTTGATACCGTAAACAGCATGGCAAACGGTTTTACCATGTGCACCGGTTCCTACGGCGTGCGTGCTGACAACGATCTGGTTGATATGATCAAGCAGTTCGGTCCGCGTATTTACTTCACCCATCTGCGCTCCACCATGCGTGAAGATAACCCGAAAACCTTCCACGAAGCGGCGCACCTGAACGGTGACGTTGATATGTACGAAGTGGTGAAAGCGATTGTTGAAGAAGAACACCGTCGTAAAGCGGAAGGCAAAGAAGACCTGATCCCGATGCGTCCGGACCACGGTCATCAGATGCTGGACGACCTGAAGAAGAAACCAACCCAGGTTACTCCGCAATTGGTCGTCTGAAAGGCCTGGCCGAAGTTCGCGGTGTCGAACTGGCGATCCAGCGCGCTTTCTTTAGCCGTTAATATCCACCGGCATGGCTGCGCGCCGTGCCGGTTCCTTCTTCCTTGCCGTCACTCTTTGAAGACGGATTCTGGAGTTTACGATGACTACTATTGTTGACAGCAATCTGCCGGTTGCCCGCCCGTCATGGGATCATTCTCGTCTGGAATCACGCATTGTGCATCTCGGTTGCGGGGCGTTTCACCGCGCGCACCAGGCGCTGTATACCCATCATCTGCTGGAAAGCACCGACAGCGACTGGGGCATCTGCGAAGTTAACCTGATGCAGGCAACGACCGCGTGCTGATCGAAAACCTGAAAAAACAGCAACTGCTGTACACCGTAGCGGAAAAAGGCGCAGAGAGCACCGAGCTGAAAATTATCGGTTCGATGAAAGAAGCGCTGCATCCGGAAATCGATGGCTGCGAAGGTATTCTCAACGCGATGGCGCGTCCGCAAACGGCGATTGTCTCTCTAACGGTCACGGAAAAAGGCTACTGCGCTGATGCGGCAAGCGGGTCAACTGGATCTCAATAACCCGCCTGATCAAGCACGATCTGGAAAACCCGACTGCCGCCGAAGTCCGCGATTGGTTACATCGTCGAAGTCGGTTGCGTCTGCGTCGTGAAAAAGGGTTGAAAGCGTTTACGGTGATGTCCTGCGATAACGTGCGTGAAAACGGTCATGTGGCAGAAGGTCGCGGTACTGGGGCTGGCTCAGGCGCGTGACCCGCAGCTGGCGGCATGGATTGAAGAAAATGTCACCTTCCCGTGCACCATGGTTGACCGCATCGTTCCGGCGGCGACGCCAGAAACCTTACAGGAAATTGCTGACCAGCTGGGTGTTTACGACCCGTGCGCCATTGCCTGCGAACCGTTCCGTCAGTGGGTGATTGAAGATAACTTTCGTTAATGGTCGCCCGGATTGGGATAAAGTGGGCGCCACAGTTCGTTGCAGACGTTGTGCCGTTCGAAATGATGAAGCTGCGTATGCTGAACCGGCAGCCACTCTTTTCTGGCGTACCTCGGTTACCTCGGCGGCTATGAAACCATTGCCGACACCGTGACTAACCCGGCTTATCGCAAAGCGGCCTTTGCCCTGATGATGCAGGGAACAAGCGCCAACGCTGTCGATGCCGGAAGGTACAGACCTGAACGCCTATGCGACGCTGCTGATCGAGCGTTTCAGCAACCCGTCCTCTGCGTCACCGTACCTGGCAGATTGCGATGGACGGCAGCCAGAAGTTACCGCAGCGTCTGCTGGACCCGGTGCGTCTGCACCTGCAAAACGGCGGCAGCTGGCGTCACCTGGCGCTGGGCGTGGCTGGCTGGATGCGTTACACCCAGGGCGTGGATGAGCAGGGTAATGCCATTGACGTGGTCGACCCGATGCTGGCGGAGTTCCAGAAGATCAACGCGCAGTATCAGGGCGCAGACCGCGTGAAAGCGCTGCTGGGCCTGAGGCGGTATTTTTGCCGATGATCTGCCGCAGAATGCCGACTTTGTTGGCGCAGTGACGGCGGCATATCAGCAGCTGTGCGAACGCGGTGCGCGCGAGTGTGTGGCTGCGCTGTAACTAACTGATTACCCTACAGACTTACTGGTCAATCAAACTGATATTTGGTTGACCAGTTTTCGTTTTTTTTGCCCACCTGTACGTGCCAACTTCCAGTGCTAATGGTATAGTTTGAGATTAACGGGGGCCGTAAAATTGCCCGTTGTAGGCCGGATAAGGGCGTTCACGCCGCATCCGGCAAAAATTTGATTAACCGCACCTAACGGACACAACACCATGAAATCTGCCACCTCTGCGCAAAGACCTTACCAGGAAGTCGGGGCGATGATCCGCGATCTGATCATAAAGACGCCGTACAATCCTGGCGAACGGCTGCCGCCGGAGCGTGAAATTGCAGAAATGCTTGATGTCACGCGGACGGTTGGTACGTGAAGCGCTGATCATGCTGGAGATCAAAGGGCTGGTGGAAGTACGCCGGGGTGCCGGTATCTATGTTCTTGATAACTCAGGCAGCCAGAACACAGACAGTCCGGATGCCAACGTCTGCAACGATGCCGGTCCTTTTGAGCTGTTACAGGCGCGGCAGTTATTGGAGAGCAACATCGCCGAGTTTGCCGCTTTGCAGGCTACCCGCGAAGATATCGTCAAAATGCGTCAGGCATTGCAACTGGAAGAGCGTGAACTTGGCTTCCAGTGCGCCGGGCAGCAGCGAAAGCGGTGACCATGCAGTTCCATCTCGCTATTGCCGAAGCAACGCATAACAGCATGCTGGTGGAGCTGTTCCGTCAGTCCTGGCAGTGGCGGGAAAACAATCCAATGTGGATCCAGTTGCACAGCCATCTGGATGACAGCCTGTATCGCAAAGAGTGGTTGGGCGATCACAAACAGATCCTCGCCGCGTTAATCAAAAAAGATGCCCGAGCGGCGAAGCTGGCAATGTGGCAGCATCTGGAAAACGTTAAGCAACGTCCTGCTGGAATTCTCGAACGTTGACGATATTTATTTTGATGGCTATCTGTTTGATTCATGGCCGCTGGATAAGTCGACGCCTGACTTATTATAATAAGCGCAAGGGGTAAACGTTCCTTGCGCTTTCTTAAATTAAGAAGTCGCAATGAGTATTACTTTGTAAATTGCAGGGTATTGTTTAGCTATCTGTATAACCTGAATGTTAGTACTCATTCTTCCTGGTAGTTATTTACCAATATAATTCCATTCACCATTTTTTAATTCAAACAGTTCTGGAAGAGATGACGGTTGCAGAGTCATACGTTTGAGTGGTGCATTTTCATCACCCGGGATAACTTTATATCCCATTTTTGCATGGATCTCCGCGGTACCGGGATAGGCTTCTATACCAATTATTGGGTCATTACCCAACTCAATATTAGCATTAAGTAATGCGGCAAGGGCGAATCCGGAAGAATTTGCTACCCCTGTTACCGTCATTATCTGATCAATATAGATATCAATCCTTGGCTGCTCATTGGTCCATCTTTTTGCCTGAGAAGCTGGAAGGGTTGAAATATATCCTATCGTGGTTCCGGCATAACCAGGAACATTGCAACCAGGGCCCTAATGTTATTTCATGAACTGTATAGTCCTCAACAGGATCGAAAGGGCTCTTCATAAATAAATTTAGCCGTAAACCTTCTGCTAACTCTGTGGTAGCATGCGCCTTTTTACATATGCCACCATATATTTCGTCTAAAGCTGAGGTGATTTTCAAGTTCCGATAGAGCATACGTCCTGTTGTTGTAATACCATCAGGATTCTCTGCATGCTCCTGTCACATAATTAAATGGCCAAGCTCTTTACTAATATCAAGTTTTCTAATTTCGACAACGCTTTTTCCATCGTAATTATGGTTATTGCCACGAGTAAGAGGCGGAAGATAGATGTTTTCCGAATCCATGCGTGCATATTTTAATTTACGTGTAAACTCACTGTCGACTATTGGGTGATGAAGGAAGTGAGCATCTGTAATAAATTTGACTCTGAAGGGCATTGCTTAATGGCATAGACATAATAGTTACCTTTTATGAGTATTTCACTGATGTTTAGAAAAATAGATAAATTTTTCTGTAGTAAAAAGAGAAGTAAACAAATGACATGCATGTTTCTGTTGTAGTGATATCAACTCTACACGGTGATATTAAAGGGTAGGAAACACTCTAAAGTATCAAAAAACGCTCATTTAAAATTATTTGCATGCAATTTAAAAGCATATCTTATTACTAATTGGAATTTGATGTTAGCTATATTGAGGTCTATATTAATAATGCCTGTGAATGGTATTTTTGATGTATTTGATATGTTATCAATTTATATTATTTACAAACTAATTGTTTCAAATAATACATGGCTGATTATGCGGAAATAAATAATTTCCCACCGGAATTAAGTAGCAGCGGTGACAAGTATTTTCATCTACGTAACTATTCGGAATATTCAGAATATACTAGCGGTTTTTTTTGAGTTTGATGATTTTTATCAAATCATGACTTTTTTCCTGAAAAGGTCAGTAGATATTCATAGGCAAGTAAGGTTTTATACTTTGCTGACAGGATTCAGGCCTGTCTCAGACTGACATGGATGTAATGAACAAAAGGGAATGGCTATGGAAAATGAGCATCAATACAGTGGTGCCCGGTGTTCAGGGCAAGCCGCATATGTTGCTAAACGTCAGGAGTGCGCAAAATGATGCGACAATCACTTCAGGCTGTTTTTACCTGAAATTTCAGGCAATAAAACGTCATCGCTGCGTAAATCGGTATGCAGCGATCTCCTCACTCTTTTTAATTCTCCTCATTCGGCATTACCGTCATTACTTGTTTTCAGGCATGCCCGAGTGGCAAGTGCATAACCCGAGCGACAAACATCTCCAGAGCTGGTATTGCCGTCAGCTGCGTTCTGCACTGTTATTTCATGAGCCACGGATTGCGCGTTGCAGGTTAATTTGAAAGAAGCGTACTGCCACACTCTGGCGATCAGCCTTGAGATAATGCTGTACCACGACGATGAACCGCTAACGTTTGATCTGGTCTGGGATAATGGCGGTTGGCGCAGTGCGACGCTGGAGAATGTCAGCTAAGCACAATCTCCAGCTCGCGCAGTTCACGCCAGAAGCGTTCGGCAACGGGATTCATGCGGGTATTCATCCGGTATGCATAGGCCTGAATCGGGATCACCAGTTCGTCCCGATTCAGTACAACGAGCTTCCCGCTGCGAATTTCTTGTTGGATGGCGTACTCCGGCAGCCAGGCAATCCCACAGCCGTCCGAGGGCAACCTGCTTTAAAAGCTCGCTCATCGAAGAGACAAAAAAGGTGCTGAAACTTAACTCACTGTGGCGCGTCAGGGTGCGATTAATCAATCGCCCCATGTAGGAGTTGCGGCTGTAA\n+SRR10971019.1 1 length=15748\nIhQ8XkfjXtShUt5~~YuhhjfX~jUL~lhN~NB}~igQgjRQ_hd[~PX~geeighhhhV[x^Q`S^SN~~khlGY;mLjeOzhWp2rN2z}NZqf[~lf3w>rgfRiWhleY~kWu<~~]7zfj@~k~iF}hBuk`)W[VcReU<miX~iniL|hD~N`S9:+yVbiWck[zUak?~W;hjkhkUM~fa`h8}JfhAG~`i`KegSHZ~iikfY~\\Gr0zQj[wM~Z~eTY~Y~k_fF|j-eyHaR~kiG{hVOZiG~fZ~jZ~U$pyqIJOh\\~h\\~lb>xxbIoGZa(lXZ_igUYJYDUiY~iZ~heEj4~dii`6wgC~~cV~Z~lgkh&]jT~jcI|K~~V~QiKIJUWpR~M5diVihX]hc=Dv~i;}cJgiiG{ik?~~hekL9n[4o~TeiSAY8eldIzF}hUklOjSJ~U\\~iSQhkUh\\~X~jhUti&~OMTQT}1~BsgkI~jijQfjglUclY~klfjgYHVxW~C{SUiiK5~PiR|8~h[TG~]~X~kX~SOhQ_BuPNjQOiXhgQkY5~~Z}^~leV~OIiiiijmC~}WblkiN~~jgN~hjFzcjhhTgfTQa8~heiZ~iH|^cF~VpJAhcUh=jb4~~{g\\~W{i[~UhE~sF~~dO~~jK~jgLiSjE~~hi0~~~q[h-~~~zNhe7~fg/b*GgaiQ~~W~iZ~hZ~iYlJ~X;t|d>\\5z~~~~xiL~~j9sfPP_X~fjfZ~Ly9z{{Yo?~{MihlI}djhlmfPN~~XI~_B~h[aSg+{clx~ijkW~eGSX3}~~s[iP}9~~~~~hiQT<~~~~flfWhRI}ggb5~|bibg?SB3}~Ohg2}~jcgVfSPN~~M~X~A~qQc[7jbMQ}QZ~ijPhjgBb^2]ogjhY~iQGuueSceGzgJjg`MhTbliK~G}ikf\\~L[uMghiHY8{~~hF{STmjkfgUiIrjhkB{~ifjgH]cEdxG:nzfijCmh.bXffRxPh\\~D~fEpU~jN~~XJ~xMfi6~~~v`:~x[TItbXbhL]i6}nG|iiVgiihhlR.~~~eF{<l}^>~|HX?s~lgXiCz~`Buy~pD~~nKbS`KhT\\^MD~IyWaelU8~uhiMH1}~if5~~tQ@~~MbhlUQ`H8{KhaFaT/wwb<B\\LhjQ~~ffB~~jfa'yslj{cN~s3}8|d.eePf^ki:~~v]g%xz~djiiX~kX~lkdI~bJ~iiimL[~h_;fil=}}kgQ_2~igDhefk[~c1ibI}BGCf%OZ}fkiVVAx3~Ktj8liNu~gYmWM~Z`A>nnI}qC~|~EzaDzRC~P|ZO6kOYG{eQikfPE~fUhjT],`MHg_gZyikWiE~nJqcD~UagO~fYrT[dVfC~k_PfPif_fkTihO,PGR_aK{Y~V~iMfG~Vpd^+~igiiUglkV~<~seVwkf\\~jegkhi;~hiiO|[P[ikiXvJyX`%^(B:jihM~~MI{gPM^I`G2v6z~~~fY~hhk[~RiiGwTVUcmM~gjUcjVX~G~icC~NfX{P=QcUkfJj[5~kefPZSjImiRePjijM~hA~~heBdR^d]_:L\\bY_;,]Y~dQ_OP~j-sNWUgMTfjILIjjiVcP~UjQ|LKkQUQaD~~iaHsi_^<fhjK{By{fSMxRIwjF~H~[}W~jh\\~fO~LEMH}EveY~h^jQB~T9f{|SfE~U{3nhm]~iVD|;}}}N}gkeZ4UhVX~iYkDd9hgmhUStH_gI~SrNlMedXUagNxjDPH~i^EtjQBuT~leO~x[d_MkfOpViNh~jd=||i]QCyk_Nw~B_\\>QkiiP1{~xvjO|ijjii8~~~YqYwegfeMrh>~~TcM[}fgUeXkdC~dPf_ZrW~L[>~~eP=hfX~FvW~9~~jN~~iY~Z~jgL~WkdC~U@}}S~kZl)~}jg[SkX~?~~kg>upb_XObXhgZ~flIJ%~~aOXfZ~Z~WZ~iFyG5NSmN`Uj%~^L~~])hjPsUkX~jhi?~~mO>~rckehleXkVlD{+AD~~[fijkT~H~En}vN|gR>ffhiOUT{M{@N9e>~~ycK~U\\~mfA|pViF~jOngbRfflgjUoPQ}ghRAL]Q~jNM]hfTgSPIPpleR~~lgjQ~OagjiQX~jiX~kA~~~rQLnI}ih^UZhG~{L}hf>||SfhB{~}1deO~~UjbhVrLY`IgjUZoI{LhmhfkdMwb'qfddTLTUiiG~VpO~~[|jiPSh\\~iSN~J~kkgZOrjL{ehg5~~fgX~7~~eX~TC~~h\\~jSC{KhRVgh[~kilRgiUH~~lhlhiIp>~~jgkkhjiSgdI~G~rk[lTM~sD~jhhC~kH~STlkhEcLxN]N~pfV~1zbSz<~ijiA~uW{X~hgWkehkH~W~QY~aI6f@eVjX~cWeTLYI`ZQV~:}edV~UieedRdJ_Xsj4vx~thhlkX~haSHwV~O~~kThN_V~?~oPY{kfK~jh[iY~iigJuh`U~XglY~giYigJ~VciZ~kW~N]iMMyC~d]~Xl'WhgiHT>FzMNCl~hXBPr@~Y~S9^FSiRjgiPhhaO;K0}~gaO`Y~ldAqph7~~~~dU~heflBmgH~cJxfeTjjM~~jS~iiiLT.~~~laekUW~hg(||H}*vkX~llfi>weOAk.ex~eQ>=LRiV~Wgh?~~VuUiY~lkf?~~~glkjjicQf.wQZp[i\\Q1~|[kgUiiG~C~j,z~~rg_WWWNmjgX~[~Vihhh\\~iF~djijkX~jN~~jX~V~F~G~dIxff^E{UIx.zzNsvbC~w`MzRhX~iL]7~dc>{D~~fkijI~I}hlMW~gXnF38TyRTE}~~Z|SkhgiSf[~jhiiP^fkeeUXU<`W~K}ROkefY~j5G[wN~~jiikVghMkTh7klQg9eJ~V-iRjhSqZC~SJlaa@WffD~G~hSKe7|~~p[~UmfOE~~UglkgZg\\SIS_7e=uijjiiOQgigiU5tTZQ~~iVgN:rmSgIp>UzgiUf<jF9~eSagQD~bYyL]Y~G}ZzO~~>~k5xNXpi5bv~ijmfZ~X~fVRyjGwW~hMmqkiA~~e9_dZ~Kt6jL8~QEXL~fgijkilf>VJ}djF~`eKvhf9wcYaiWgPG~jN~~iji;ygeFfQG?LTNo_Bmx~dB~xpiijkP~~QhkK~c4lKxjXzkileB~~~|Z~9~~~uaPW~gi\\~j:~}g[L?lJvNANii8S>~~giV;~~{Gs;>nFrhI~H|lHpdTfWSjhjkhiZ~Q~~WvfWf3~~hZ~dfki?~}VcYSiQ|ijP[~i<?igK~khkC~f`Ikka4~|NtgfS_3~~~~|dNk3L0+CJ<Y[~ilkiG}M_`\\_>~~xRQ|ilgkeY~jSZ|C~~flVcliYLH}Qf@vXNc\\:`uzZukZ~hkii2~~~~fZlL~iVhhU7srbRWtiKc_LaGygO1~a;lOK``4wp~c/~~~jH~sCEcNY{]~^1pfZ~d=~pUiWYglkikW[RReB:UkgUQ~~i\\~jZ~iUzB~VcibF~gScKhhSQSUiilTRg[EixL}khk0~_Qha:F[gQY~fI~=|zWX~d%~SP~~giI~cUVgTe`ji]TIQ~gj]OZ~dfhUN>z~~PfiL~jYkX~RK~NfilPiP|X{igA]N~lii_hgX~QF~SLZii_AmRR@^aeK~c[|Y~Z~fkX~eF|iEkbV~jjihg_fcS=fcO5\\RI|gTc@u0MllaKgjQPiRkjgi@o?^G_hjjgGBo~jkeV~Ta9~}bkiSekYijgdF^bdVZPGqH~jUh\\~J}iUcR_UV?xhi0~wiWDrrYtSgK~FoL]]~NhUH~WNcUV|J~d<H{Q~~UahLX~5~~kTcQQfgfdgJzmSFaTHsAt~~~jK~ede=ue[~gj^jTjg?~bB~wW~jfiPQ+8G8myGrFhdgNVwW~igjL^Hwjc?v~gihjRcPS~Pg[{SXxTFiRF8~eh8|ehfXeYceP^NMS=gfkldU~jUg<2q~{mVH{~fI~WJdjRjgkDHg<XMsgZ~hUtigQjhgNije[Ul7g\\~bC~h]dC~F}xW~RfiUa]hS<kV@EihWuO~gkfj_hd;yyjic7f:w}rQQk[LzehZtQd4=klPh^TfiSifkY~I~Uc*uThPQ`USTeQehggdJvPCq\\gVPgeli=~~ehV~VP~~i3}}}dS[@QUkY~fjSkYUK~ZbkRdd5uPhhgiXagfNwMSPeiU]~:~o`'z|h]F~a(Tiijjf?~~giH~jbeje\\Upci6qQZ{>~~iE~4|~fPY|fkV:qeikiiiiigfIKnhSST~jT~jfddCvNQihK~ejQPqRX~jji%djM~d5gVrRfijjZxS`eUOhildNT7{~~~g\\~`SUP~~hU9~jimQcijO~~hO7}~thkX~jfdSI~N~~melfghSRG~i5~H}cG~hiCk6VXnSOZx>eDY_SgZRP{5~~fO=QEI/ePSy-~~~~qPu~hh<~~~qTQ\\gf^SgZeO~UdlL~cXX~[|SlL{X~RcG|RfX~h`W~jgkgiNxTReL~fikW~ha8zjY|ikkbA~gjkZYdO.{~}SoE~~kZqZgkiAjX/|}}{fej@~ii~i`MZ=tvlKgQQejiIfheFyjjgdSUhikdV~igX}XeC_ddffM~O~~ijiijjffljfhlfhiji5{id8~QjNc`Sje-j{phiddMeCrhLzojkikiSU~ii\\~kkdV~UIQgY~jgO~kcJT~fehKmaC~iX~I6{U]okjiPzeLjZ~ijg5ennV{Q~~kgjThijgd3\\cRjgjgelliK~iiY~LM{E>ejW~jePSf3~|N_i_V~UhX~S]7~gNukgU~=hC~eA[cEv~^ukf\\~hS`hg]~eeW~Y~H]ihY}gO8~eH{mOKi?kjFw|[~hjX~gQaMR|hE~hhije&^eS~iiT3}cQ8ifjgkTDsJSMM]TgJl}gRdgE~eeOHsTbjM~~g4ug\\yH~~m>~cfhejX~ihkShhHEQ*eHjGyFoSV|hiX~iM~A~~ThhghZcE~ShX~eUjgkTR}ggX~jihOhkd_hhelfgI~biYhP.|~~lLhZ~WXuW8~~~fAy=`P~~ijkchg?K%@geLSOZ~Mb2QXTU~kg\\~X~?w~kffZ~fgg0_ScUiMG~NbRehcJdN~~kiif\\]TGmjMViekiIkP`gTO~efhhijdWZRjgXhg]f]iTPg9jW~jBof6ZtikiiURZ~jjeX~kgYz]gSghbSY~jOQaB~eOdG~RnZejS~\\ClW~ildhiSjhfgkfVig8{~Y}FlOhQN)Ed?~~~~hV~QhihX|B~xjS9i7cNhNcNTOU~ihYkgZ~fiQRbOJOJfEFi:PVViLt[~hjX~jI~hiD|T~jglSTyCmhfSeYqfjSekaQdTijg[~W}[VKdiihgiYygiD{dO[TQ\\hFtO:y}uRbMbT~JhhRejUdHyAHgccj*c8[L`Gu~~jQeZ~b3w&ddhRilcjSzPQ~eUh@hXOo(kkfjSU~>6uiHP2{~|eeU^h9~~iejki3~~|SpaNik9~~~qiZSgjPPdeIegYp7O]1m@|cdRGmKCSffh[~SwWgh7sZJbTZ~lelkB~u8z~}ieeOXiL~SfdV<qj?fJxWoPiMwygW~k_=TiM~jgk8hi(zzRaiWRrjcjCkI~dijX~idD~c@h@|TgcikJ[,y{tkcMVkhfcQM[DW_]e^=_w?~~bjRhQR`J~LrlCf>bv~fih<fiRhiUNgfSeiMlWaLTqjX~jIjM\\~i[eW\\~fK~hC{~~lLhMOchiOO`kkbhgehejUgY|PKV/:A\\PW~9\\3~QFpSiDzUiFUZV~WTRR~;~zZEl[VMNjX~Y~ii[v;ingePMrtF~|h];|kfU~fR>ofd.zghiYVredDzG~~~ii(ijkfhcBCOX0hM~VcJmMkkW~gM_Z~f\\}dehehdgGN5`O8`PNZ~g[~IlA{}cfihMkldfigiGxT_S1`?|L~&zyf`jgiiTeRSd1uyc>olBu5|z~~gjk4_MQbdSQhe*~~~~WSeKvhSW~kW~igj[ITchSh7z_GygKNjW~RUeOjfjiiD~UgfXCS~hQUig\\eb_Mfa?ye:jUqfN~f?GZfeihfIzY~RV[i\\~kkWqJ{X~@stsaRbKDxQhPefh@gG~K~tt`]Z<na]=qZbPq=p^?kD?n_ZTtOvb]b]^T]WD^Cm^[Pl[Ri?]%21fha]aI:nrkZW_[NLY7nnZHGBmIIp\\IUeD?`jI__@m\\bFtrEQ&T>]T3opJ^_GtaT,~T?J[2`H@:ZGDId`]0f;OC\\^]9DlYIV^St]9tusa\\bHoGE^LTV`:lWMn_Dpv^_^FuuPtaZbZZaRtb\\]>q`]\\DaYD_1oonMaFuua[8n`fStOt`^`a?nWbb]b<o]`]_>utb[VOtJ_]_HUj^H[TK1f/nh3*XVQQbEsraD=7_`]@b-npmE8^Z(dkOu_G3pPJjb\\FF%RUH\\FITq^]cKSCDSb+qrd[:a[``Msb]?kQXOva^\\RpTt_WF^G@{YPt`]^XBXaOt_Y1W>IKGP>\\GY`^=su`Ot]IX=qp_\\]9op^[_^`\\Tt6qbOvb,ha\\UlJvb]b`b]bMt%;LFJRJ]F]aHaXPvbY[Sp]^`]bKFFg>Fb\\aNbWH>mVPbaAoGsJG\\cb\\9S3_oPm]`^_\\`;n?sqD[XCRGBFKd`^SpY];nPo]\\E)LGOt`F]L1$mm[Pa`@tta[Yc`CmI_N__GHUq@vue`<sIVbbCsSr^OvbZ\\J_`YDsY`G_Rt]HU?~XG`aCqTt]cQn>R;BaqPta]cb^]GvvbKH^[^OmU\\`FubXE_(j[K(9ZTq]H]G[aJRbNtI`I>r]^.oppa<h@>ruuZ?h[JE_8uus^WMSoYYThWP]YK][TZ>t]`^^aY[TNtC8iVAXYTt]Pta\\_^Ovb]bLdE^/pqoJUYUtKVLu\\=oJ`]ITsRp``F\\>rGaYZa]IV^Tt&hHEPsKRLJlLaYZHDaZ>^Z\\bXRL:pq`OuQMq+Z>nW]`KVDup-qNmZGtb[=qaYY\\I]Rs\\\\bZb[YR\\V\\`YOp_\\aYZ_HQ>f<`o]BuZ]Z^`]IStUJAo`]8qhL[G)Aj\\Vm\\Ipp`[1l_\\`\\L_\\_^^`O]]\\6ppI^Ovb<Kua4ulZ5Qp^NuM4STtG]@m^]a3rrhBj]Qn?UaPqOF.fUJ1]K;gmLJQp=pa@PS2W`XZ`G:^Kp^W2sjZ_]bBulQpCl_b]IqqUJB\\a^PtaVO>suu`4rrmSmMBr`DZ]Ov^aE?rtaF]`_aFumG`<qtm]SqZa?r_]]BQ[bRrNq-m>dGCs\\aYZ^_GI^VGLX^EHZI=An]]]MuF2`Ov`Fr[CEobOtFF[YD]\\b`_AY0orrqSpFuh]QaXO4bnO,HU[Y[,laJGJKH]N[bSpZ.qq?``JPl4AKGDYI+jqW]3W]\\]GV3nU>ep\\aInLNA]]ZOfMQtIaLrZ@mIVA_AVPrN>ra]F8^d\\@fgZI_]MmTG[Y\\ZbYMOYa>ugQ0uspV6k_C>Ts/nQDZROv`ab\\TtNqFm?Rp[V]aSt\\8V\\ZG\\[PGTZ[?fKtaOu__\\aOtaXB`]^U^]<ttEmHV?ssZaZbLi,m`\\?orJ`]SpMrGOn\\KJZPJHNQ:GG3Qp_\\`[>pHOu`^_bS[B>0hjEJI^`aQZK]9,32M=dV=~\\_``^]AmQmFX`\\Kqq^OvUtKV[\\HRpNtUrSqW^Re\\UqV-roIPlSB)[]*qsqZRh3qtn@i]AuvtaADc3Da```AmDpO99;\\Lg]^6X]\\IaHvv];P:G,[//YaYKWGdNtaX;b]]\\cb\\;ttqYAI^^^bWWYCo[2VcbPvLY]^a[VCiD``\\a]F4B?Ib\\\\\\]^Rt^EoSpYVb]PtbIjDU_@tC@\\JVArR)\\O.[JGaHGefH_FtaQwbKR[D]Yc`[8p]2839C^OvM<ghBs^YIa[b]aJRWMqK3maHUOebZFX`]`HDtuPt`]]IaNubb]]3m[SjMub]a]?>3encX?rt\\bbNta>sjZ6pmGa[aYMv^aZFqYI`Ot`^fSHeVSUTH$RQEIO9V@T>aQTB1dgg[HcSUM9MTHfRG=`^:daSV@FeJcQRTCGfTQUTVUWFQP<RV?SI5UUSFgVRU4fV:<aeQTRTRT6e_RN?:^KMTSCb/aa]UVRBRcTHe:`CHTU<b[YHe;9ce_TFN%OPWTO;KV:X1``ANUQ.bbb_RRTT-G]QV@NWUSRU=Q?NP8=BT>aSJfCfVQHeB@SD3VUSWI_2eeaSURTTSJcQUS>RHfLEbVVQRVRVGfUHfVVQT@ccFeJaRU8N<2CCSTEEPRRVHbQQBMRN$Z0KH]9f_XM6gQSQ>Q'+^bUSP>TVQFfWV@ffQVHfKbBffTIfUGfHbQR(BTRTVT>K%R:`?PO>P@ccRTU@eVUTJfC];fBXcJUQRJcSUWTJcQQVG%5QVSLDN:SFd@IfVRUTG`5a39N4@RM*?\\7MJeTUSHfT1\\UQQFfTGe@VP9TRVSTTUHfVAdbHgVIgVF]WU>VOD>G3>JeUTUVRBccUTTBccSXVTFbL:TUTIe:eA;ANUPSUTTVVNR8aQSSGQRUTTUSUM:NcWSSRTUS9eP9_SQ1``RHOVT3b?MUTJcTTP6`LSQVT76:_VTJcJeUTWS<UTTTUFeV+ETWJfVO3VHOF0SRBccSBNIbTTUTTVR@P@MSD*8GQ9bRA7_WF<RTI`VRLb>W>T+aYU;fffRVSEb:QVU?AbcRT@SVRUTV?ORTP:\\NUSUTHDfUTFQ$[O?IVSVS8gUPDFcD_PHcQVVTUGfU@gfURGe?AGgVVHfT=SFe.LE`UU;+RYQ@T5`+GL.O7_^?FeG)6TaUUSVU)cc[T@_QRJcRDQRUIeFfVTUTH]B6cR7(RQS<VQ;HaVS&KHTIcAffTVVO%KGeM9BSQ<GcVVT-eZUTJcTAffQS?ffU=QUKfSIdVSUSWTTSIc:^<`TTVUST;BbfVQFf@JTTSSHfVSF>'``<GHUT;_QTJfTIc@T5`7bRJfVHXTQGd?BVPTSO)RSRWSVQRT:eSVRT<^>dc@VVSVVPE_QQV;JSJcQUSQTPUS>fe:YQU5`Y[PCRX5^'4P2UC7DOQJRKfUAHRQRVTFQ@ITGfK*_QHgURTVHfQ@fO$iOOPUTIfTTQ?U5cR.NUFfVQRMCT>SQPSTIa%[TVVTHcP=%UaVRFf@aUHfIc3deaRRUFfVHfVHfS7gW*bN<_U:aGbPQS2YSR%OHfVRUUUU:f_FfHbRTFfVRURS9gRQWVTGbQRK0D5fffeVVQFfJcTTVTUUH]SGRJaTUIRQUSTV@HRUO$;E8AMPUH`<KLCOA@@=AKQ>LB/@LDOCUNLBHTTSHfUTSRJcTUTJMEeSQWLS2B3?QT+>7ceSKdTTT*QTJcTM7@_TIfVREa>RISASTURRJcSQK`'\\\\\\O3B=A?@(==-MA2cSHfRAdbTT:efVRLJMSNUTVR;URRVTUVRVV>gfVJcQ8HBccT;aNAURV?ddTUU<XSMBPOM%QM;NH;PGeU<f\\QIb?J`Q9ePIfJfTT<ffW=BbTJfS6gQ:eVSORSHbQRVRVRB@EH`GfRSJcTIfUP7_M7^_?QS:HdUT@c.G<URVRUTUAC5TOP)c_QSIc+XP9`RG`>`TIfIcO:eOEaS,ba>[fVTTUSRS9cSUSVAffL\\FTWVB`JcQG[N:bPVUTUTIfRLWJPTRV:_TLO?TMTEfWEfHbRVVTTJeSAccBffTUSTV4X<dbTVQRVGfUGfHSQUTSRSQUT;cOKfUIfTUTTP>P0D=U7a8P%ECffVSRIeKfW@ffJfT@OJTSW=IeS;9*dfaEd5HQB[TJf@USVTJcQWTUVTWJcTTVTVGfVTJcRUHfUUTV>\\UBSHfE`R@eVRVJcHfTUSIcT4^F56]R@B2BAdcKfHbSVSWNSR9e^TWSTUHfHdAbcRTTSUSWRAffQSFf8ffffVVRT/XEdVPRSIcSCgU>TSHfVRUHf*_04fVAST<GcGa5dcV1bYJ&:RTTVTWJcSWVSGfV4eeVSVGfTTHfVQA/5/_M9_SVTTSTBNAFAUA:BacTIfU5bFS7bQVAUHeW=bSIfTDcQUQTXIcUV=gdUTT<^GgVTTVVRE]QHfQUTUUP4cIcR<ETNT8_VTUTWVSVRQAffQXRUTJcIeKfVL>QD`RTUSVV;ffcAc^L<LSS;eS<`RTSUTR9TQSUHfMQ)MVPFdTSUUVQSWP:TTUS:I@QVGfIcSHfVSBOOBRUHfVRKfTU=MIbSURBP'@GC>QSJfVRUTH<C?IRTT?QN8QHfTBdcSQSTN:P9`TQ8IRUSVSQ@TST7P7JBTGe;T/G=eZPFUUSKG8TJfVTTINHQUVVTHZ$PS:9JVRGfWS,dWUTVRUSW5PAL'YVUS9caP<VS=?Ge6pQVHfUKfSSTIcTHfQDaS5ffEb,SUVQFfVPPFST9gQPTJfVT8`OS<@TQRNGTSSTHfRTS4ffQVTU=QRSTS?G_QN:`RQVVRGe@TQEeV=Je2U1e[VTU4_F[:6`FeUTSVRAccLMTH%FQKfJcSV9gbURJ`9@bSRS9JUSU@ffQTU=SVTUU;gfRT=GeRUSSU=U<9VdQ@BffTJcSWUJf<^L?A`fHUTT7iSKfCaQO?^HSSTHfRHfQWU0]ASQ@VSVSUHfWSSJNVR2bXHfM=O?BJbTJcTVTBccTT<IbUVHfIdSS7UQU=UGLZR5cc/LM5VRJdP,HJTRN<G?QUHfTC6K-^ESCM9\\QV3cdPLP/JTHfS6gW>GY4efcSHPQURSTM9C`8dGYIaTSV=`KDB?VRBSUSTVVGeTT9,DRB]*^LOASTTU<UGfRVQQKfVHfVHQSJJV@Bd`:89dVR@cbQVTAO@RT=AG:A\\QUTVSTDGeRTUDY,\\ZT5cg\\5B8b-QRVTGgQU%\\USVRIcSTF`??YUTUVSJfTT$8MRSSVT0WQUGaGT2ggQVTTJfSJfTFPQHfRIeTRJcSV?C?:X`H=HWGd5K24McQ:]Q?GcST@VAd\\<TUTVSW8a4ZTJbRUIaB?NWVPDP:H;RCHQUTTIc0DB_Q,bS2b^=F:N@]bQDT:dSTR3^SVIdJV6`SVSWUTR0HGEcJcOHcJcTH\\@;SVPVHNURV?SIfTS>dVTTBIbR@NC::T,c]UBffRRJcTH]5IUSVDVRJcIgVRUEdLRM<QURIaRS?6VGfGeIcJfU6ZIc=WPJcSWVRTUU8U]T4M;TUHeUKfUSCfSO4cVQGTTSROU?RTTSBZRJfTUVQRR6gVUUT9H3\\B\\,@dcTBccSWURT@a\\@VVR0_UUT<QUSDdIfUU?TTVRMaTUTVQTF<=+K9eOV<fffVN'UaVRJcTVTVTVRHbQFe<SSSTSUTOBbcQVVQ<TNOTSFS4f_PCKI^TUUP;UTM9Q/ccaVQU;?QVTGgQKf1LIcST@TT/;FfE:cSTTKdTVQDP>I,EWVT;ff];LST4ffffbUP8VGfTSTWSTVSVRJcTVTQBHf7fffY3_UTVOBONR/QRJcTSSUST0cc`JfRDTJfCgVTTUT1g_QHfQVS=%4VTVJcHf>f]AVTTQ9aTSUVTFeHfVSKfUUVGfUTVTUTHfVTSCVJcTV@fcNAaVTTGe>RUUTTTTEfVHfV?FT=P+ZL;:4=FTSTS5K'2H<QTO?5ZUGfQV&_><UAOBRD`?AS<VGb;9N4_\\?+WRRIKNGfRU?TTS(SSHf;beH.Q`Q@RST&RSJcT&dDV3MRPS@L]AO%mQVPVVSV?SHfF7,&F?K?VRDTITVQR;SUT'fffS3cbIeTAffRVP7`eSUGeP?@0CE6ORS<STUHfUSUTVQ><.Ob]UFfB6MLBP9_O):G]?]G@E?5V50O95`dP5SGe>SVSFd7>R<OTTBdcSBMTUSHfVGQHPTD`@9i>8S?<]]]P>S?M6`FU0aaJ;=URGP@N;J,jN@7`SEQSVP:cHW6cVHfVTF%MIaQQAceHcJeN8KH[1ccGe@S1I?9PKQ9T@e`SM(_`AUTR3aaJ<KST8UPG`TJ_6@VR3`3QM4~8aSV@MPQ0GLO@TMaTGb:@U8bR$mVVSKfHfTHfWVTAbPHdT9e>dfUU4ccQU=`JNO(>PMIPKPRN7a;=L:TUN3tON@Jb::dUT>gfUTTUTD];TVSVSVSSKTTT7c$.=^K@IHbRTT=4beeTSGe>PWSIcUVG\\:gAKbT?HfVHfUTSP><e^IcS6d;7`SN<LIbJ>JM9R9V=b`?I+H\\@VVSD1_`RVH`GP7eeQ0aaSTTVTTRJVP&JBHZPEbQ@T9`:aUTS8CU;S@TT7`HdDaFfVSVPDQGPST7cSTIcTSUTVTUOR>RTJSTT<URUPWN,bbVPNHGcASbFV&UTOSU7K?VRJcSV@JK-F`LIQS>YNVQIA)^TTI]S?=JcQQ6cJ+_SHPSQ@$RJL;CHWSDdQ0aaIdQ?@RWUSSLQJb<JV3WOBE8C78ZWQRS<@a<RWU?HcC9YT>;Q:e_3MM%U2O9\\6O8E@G>UC,^SVR?2_P?ffVSUDeT41SH<96Q^U8dTTEbQ;cE:(;NG_WVS@8bX@EDF1NDfVHe?N/Y9_NQ9]:S(Q7gO>TS;MQU.VVS?ffVTVP:TJcR7AM)0W`QU>O)FHF?dZ:RSS>7cT4^>@0affcQKeTTAR@;PPKJ_SBJTHfVT(_STT)aVI'_B^VTVQK<KTJGXT3\\/,OLJTRQ>LQSAPM(S=IdUTU4_PTU>UTSDR9L>OER=[;*H<OL?G>C[9R4^A?TT9QQ4V-J;NO:M9IdTTO:eUVHfVS3fO7QTTUS6edFeIaTTDSLN4ddfVR(ccccb\\US@aMRK`SQNSVRP>9W.UTIW)WLI<KTR:V>)Z>?URO7e^TSRTKfHfU1ddd[CTK>.`bbL`TAdcO7hOURFf:bHd@VGd$Z<=P;eVRUT7`JURV6\\Hf@+accK3efPT+aHdIc=ANIbT8dP<cRNC?8Y:LI^RP?-a^VUO;ELG%VQTSTVTV?f`:L6`G^S?aPHa6cQWU&P_`UTVTT@VH=TRS9A9RTTVVRU@f^:N>QHcTVQJG`:%WPECVS'S.4F8;/IcTJc4Q?QVKDS>gdJfTVQQAffTP;<_KTF6EUTUTVGTBQ5B&35G:AH?BFGV;UTTUTTVU@UTS<?aU7TWV=gL/[[TO6`QH^'bQVSVTIV,ddW:A8`J\\V9TS5@NL1~T7hOTUHfTUVQGQ6HRHbNR$]<C@MS=UPQWJcHfS43/\\&WMOGTTSVGfUTS&FI^7`QFb1ReaP@6TJ)DbUQK6><3=AG*HN2aTJ^Eb@O?QO,[5IVT>7`SSQ5e]QKeTT?fM,T=Fd65@6``LMMH^:TUSVVSWV,ecB8G6PLVQHfVRGe@A4cRSDMCLQCJ'NP>(bO+C;fT:eJcQQUTSTHP3`aPKQVQQ@Q-`C9TFeKPN'JOQ@DOQD[9aOT&RUS=%R9bN4WNHfQBEfUTJM@:bP>QVRUTUSGfUDdSTS9I2~A`SV:MQW7`B<cU?QUF`>-AU0ag]SGfVDcE_BDTEcCG2OKN:e@T?TQRE_;RTSG\\&STN9-HHaRUNRC9SH;ZVPQNG6E*V;^fVTTW8?F3K;48PTVIcRGT6[SVK&j>`VS'aWMKKIJRT.PLFS<;5bALHfSUTHfV>aTQRDULPQ>>VUSHb(W]TR30a7`;T9bTSV)ZQTT@AJ5_<^=KVJ9gRN3tPTVS+9R/`iS4_K^RTTHfUTSVUSO.XaO@KfJRQ7`IdTUSHfTU*M/,S56<<IcSUTT%mR=bRTFaUGd;UTVGf&R]CE6[dQC(cG`IfSVS@6^^F<e+XTKf=fR7N18VTVIgUT?G,S;eSV5EQRW-]XLUDD;7bWOE9WJ1chRQRR2VUSTVSVAP=_SRIeA@&eRQVARV@NKf>FTIcSHeV@N;eSCdfSIc+SUSV;[4hCaRKfGR<`C,@RbecF^=eV@ffUQM2~?RHfHbQR:?TTUT4^7hOVQRSM.URUL=L4feNSLUFWH6.38\\fR<MBUK=_K/__TUHfT8ecSVSX@bXM.eeeZ=VQL<cS,HU:_SV:eGSEM8[cTUT4N>:eT<RT<C`Ge9S@:a@ZeVVQ,`TA_PGfTUVIeUSKfTQWREcGfL>F`SGV5b,@e5dUVSIgVJcH_6cQId4hdPUT/:^caLK(dSBQSQ,19VRTON?TVU4J8R<MPO?TG?EeV4VIfGd29@TUVRL\\EPK9aOW=+]a`C:39PS;S6_HSS>]Ga>bN7iOAffUSUSU8aSSVVSUDJ*`DO3aVRUE]4]IFe=eTDJfTR7gGbP?fb$YQTHfM?7YT+_ZT>UT7dIQ>>@UPSU.SVGG_UQFfTVVS1cbAbgUUUJfU<M:ddUAf_6`fQ;IbQN4ddIU5mTSTUTCb:T<N><6^QAQVRUL,M+D/4PaU@TQKKRT7]PG`=QTSS6[XWSWUT2d[PFUTS6bRS@2dffTGcN;e;aSRWPQ?QVPWRTSW4OAA*KI5lORFfUSJcQVB*FcTKb=TTSUUGUTTT3bRTV@OUSU7f:d6\\fQ6_FOGL&,?D+XcTUT0IUSVVGU;&cbMRT8c,a^VSTVEWDRT0eeedH[QV?QVAK3l@7?P<bR,I:8TOUTSQVGfRSGfVHfHfRUVRRTRR6fe^HPTIaVJcQUTVSQAVTUS/\\dYFb8deSWSN>Q*dbPUVRTSL??SUTSS7k0^`QTUJTIcFfDcQQ?SQT+US9<KGRS)b<6e`?TS=TST6`?cfVRMbTUJfCaQ7`VNVQ:N<LU8dVRRKfP6`1be\\RQ>SJ>S0ghARHSTU6F5UfPS,c``bURQ@UAd^4dffT=RTUQSU(aa]OIR:H`QV8IZR4eeTTUVRUT>>1>7PeTQO5mOS@MCETUR<R7gPNSCNDRU=J<KTU@Jd2ba?dfVRFf;cfS5RUVU1PUQV@VT-fffffTTTT@N0PP2JUK:eD3\\S=VRUTBC\\BeZ6aPZ;H$SQV=BVR2JSTT8QHeHfIe0fXP+SM*D,9;<SUSEWQSGcU<0RPS=bB_UH_8IIbBRUTIeS=dUR(bcbB;TUTVS4fS=EPSTL+_SVVGd,h]FQS;eB5caKM(ddOTHdFe:/dgA8bWU8cUSRBACdWSTTJc@8IV>d>ffU8dT=5^4ed>c`RJcHfIfKfGfJ,P;8J;RFdBSBC=fPDR'`bZ?NVTUSVSV<YSTQ9FVHfH]USG]@MQ;eCQW7MTQ8S-`+Wdeeee]QSK$ffMTP?T(F`bV@WT1c^<URUTUT0eeeebHQST7gg^&:?@MSV@QUUSK\\VRUQ%XTGfPM5C1]'bcbSTST.bHMTOCSSQHhTKb5L4cIUSTV6TSQRTTUTUVSTCgTUTVHfP?EcU;ffc@cc6Z7@`T<SP6_-bccM)R;ANXVHbUSURQUHfQE@bb?^1H4~VQAfgV6N<4`SURUSTSFW?9N:OdRCVVQEeS5I;7;R-cccP?S8GV<TVGfVVRT7hVQHd;QP%cddX3@bST9PI5bcVM9S>DeU.ffL7RV@P<TS;RTVSVAffVVBc>@BRVSHUS@REI<I2>MQ/N%a`dX:_IfWR:FUU>KfVIhVRKfSLdSV=;6_KSFeM+dhPEMFfT>TT6XPJ@QUHfT>]IUUVRU8V@WcTSRVTTS3fdBQSTUGc0M5QR9@bUSJfT7`SUTRQUSTVTHfWQTVRTMO2vACbfVQUT?;8_H:E?M;bPV:VN,l@TQCQ*a'K;daS1c[:HaMSSWSTSTHcTSRTUUSHe>;TVVQRIcIfTSRU;.[UT;RTSOF_TRTUVTTST:_HcTT>GUGO0ZH>TVTSDfV=R>ffVUHfTFXVJdH`7`VTVQQUTVS@TTUSCfSQD]>@=VCRUR@cRVDM+eUNB?NH;S@?QVSU=N;eVQUI'ZKQHfRVSKfVHfU9cTBggT'RPTQTV@ffRT6iVRVI_4_PSRTVRURGhHc9J9dPU/__TWVRHPQM9lVSW/a\\S@KfUQQVRRGfURUQUKfB[[TUSSV<6`2ijTIfK*^A_@THfT;=SS=8`GfBMRJcQFfVGb;7a`PUQQ&]RV&TSSAfgU:[IXST9A^\\6]N];ST?STUVRVT&:+AA+BO-cffdRFdUTS1I9fI$6gHdTUU?RKK<4ZSSQ&JU=?dUB@<<I5aA\\KNGfVS<9ad`QHRWRHeSM2`EFG^;RTVPf\nSequence data that is assembled or reconstructed from sequencing reads, are usually stored in a slightly different format. The “fasta” format (.fasta/.fa/.fna) is similar to fastq, except without the quality scores for each base. This format consists of a header line prefixed with a “>” character, followed by a newline, after this the actual sequence data in the form of ACTG/actg and N(to represent unknown bases). Followed by another new line. For example:\n>Chromosome1\nACGTACTGATCAGATCGATCGAGCGGGCGCGCGCAATGCATCGA\n>Chromosome2\nACGCTAGCTAGCTAGCTAGCATCGATCGACA\n>Chromosome3\nGCATGCATCGATCGATGCACGGCATCG\n\n\nQ2:\nA. fastq files generally contain what type of information?\n\nSequencing reads, containing sequences of nucleotide bases.\nSequencing reads, containing the quality scores of nucleotide base calls.\nSequencing reads, containing both nucleotide base calls and corresponding quality scores.\n\nB. The Sequence Read Archive (SRA) contains what type of data?"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-pre-assembly-qc",
    "href": "Day1.html#dna-sequence-data-pre-assembly-qc",
    "title": "Day 1 - Genomics Overview",
    "section": "3. DNA sequence data: Pre-Assembly QC",
    "text": "3. DNA sequence data: Pre-Assembly QC\nThe type of sequencing and assembly you may want to do can depend on your study organism. Some species have intrinsically more or less complex genomes. There are a few important considerations that can inform your strategy, but sometimes it is difficult to know what these may be without data. Some major considerations are; sequencing coverage, ploidy, heterozygosity, repeat density and repeat structure.\nOne useful initial QC procedure to follow is to break down sequencing reads into short (for instance 21bp) overlapping sub-strings called k-mers (in this case we would call them 21-mers) to allow us to get a more accurate assessment of genome properties. k-mers are useful because some sequencing reads contain errors. By breaking down reads into sub-strings, we can distinguish errors from none errors, based on the number of times they appear in the dataset (error k-mers hould be very rare, whereas “real” biological data should appear at a frequency dependent on the sequencing coverage).\n\n3.1. Sequencing coverage\nSequencing coverage is the number of times that any given base-pair in your genome appears in your sequencing read data. Put another way, it is the ratio of sequence read data to actual genome size, so if we imagine a 100Mbp haploid genome and we have 1Gbp of sequencing data, we would estimate that we have a sequencing coverage of 10. In practice, this estimate is usually roughly accurate for the median coverage value, but due to the random probability of sampling in combination with sequencing bias, coverage varies according to a distribution.\nLet’s have a look at our datasets again. First, let’s have a look at the basic statistics for the HiFi data using the BBTools suite.\n##Bash/command line code\nreformat.sh in1=SRR10971019.fastq lhist=HiFi_length.txt\n\njava -ea -Xms300m -cp /pub66/samw/bin/miniconda3/envs/CR_workshop/opt/bbmap-39.00-0/current/ jgi.ReformatReads in1=SRR10971019.fastq lhist=HiFi_length.txt\nExecuting jgi.ReformatReads [in1=SRR10971019.fastq, lhist=HiFi_length.txt]\n\nSet length histogram output to Illumina_length.txt\nNo output stream specified.  To write to stdout, please specify 'out=stdout.fq' or similar.\nInput is being processed as unpaired\nInput:                      95514 reads             1389500381 bases\nOutput:                     95514 reads (100.00%)   1389500381 bases (100.00%)\n\nTime:                           6.963 seconds.\nReads Processed:       95514    13.72k reads/sec\nBases Processed:       1389m    199.54m bases/sec\nWe can see that we have 95,514 reads and roughly 1.4Gbp in total. This command also prints a histogram of read lengths to the file “HiFi_length.txt”. Let’s open it up and have a look in R.\n##R code\nlibrary(ggplot2)\nHiFi_hist <- read.table(\"HiFi_length.txt\")\nggplot(data=HiFi_hist,aes(x=V1,y=V2)) + geom_col()\nLet’s have a look at the k-mer content to find out more about our dataset and our organism. Here’s how you could generate a 21-mer histograms for the data we downloaded earlier, using the program jellyfish.\n##Bash/command line code\nkat_jellyfish count -t 20 -m21 -C -s 10G -o ecoli_HiSeqX.jf21 SRR18106304.fastq\nkat_jellyfish histo -o ecoli_HiSeqX.histo ecoli_HiSeqX.jf21\n\n##R code\nlibrary(ggplot2)\nHiSeq_kmers <- read.table(\"ecoli_HiSeqX.histo\")\n#you may need to adjust the x and y axis limits, depending on the data.\nggplot(data=HiSeq_kmers,aes(x=V1,y=V2)) + geom_point() + xlim(0,500) + ylim(0,100000)\nWe can also feed our data into another program (genomescope), which is able to fit a model to the histogram and calculate some predictions about the genome properties, such as genome size, heterozygosity (if present), repetitiveness and sequencing coverage.\n##Bash/command line code\ngenomescope.R ecoli_HiSeqX.histo 21 150 hiseq_genomescope\n\n\n\n\n\n\n3.1 Questions\n\n\nQ3: For dataset X, how much total sequencing data do we have?\nA. How much total sequencing data do we have for each dataset?\nB. What is the estimated size of this genome?\nC. What is the approximate sequencing coverage for each dataset?\nD. Which dataset has the highest error rate?\n\n\n\n3.2. Ploidy\nPloidy refers to the number of chromosome copies that an organism has. A single copy is haploid, two copies of a chromosome is diploid (most sexually reproducing organisms are diploid), however higher numbers of copies (the general term is polyploid) are commonly found in nature, particularly in plants.\nIt is important to note that different ploidy states can exist within an organism - In humans for example, the autosomes are most often diploid, the mitochondrial genome is most often haploid, and the X chromosome can be either haploid or diploid.\nIn addition, ploidy levels can vary between different tissues. Some cells found in the liver are normally polyploid and karyotype alterations have also been linked to cancerous tissues. In another case, Honey bees can have entirely haploid autosomes (which initiates male development) or diploid autosomes (which initiates female development) (Aamidor et al., 2018). Choosing which individual and tissue to sample for whole genome sequencing is a crucial decision!\n\nFigure 2: k-mer histograms showing the characteristic double peak of a diploid organism, with the homozygous peak region indicated in green, the heterozygous peak region indicated in blue and the error region peak indicated in red. Notice the difference in the error region, between the Illumina and the PacBio CLR read data.\n\n\n\n\n\n\n\n\n3.2 Questions\n\n\nQ4:\nA. Our datasets represent a genome with what type of ploidy?\nB. The data for a different organism shown in Figure 2, has what type of ploidy?\nC. An organism with more than two copies of each Chromosome, has what type of ploidy?\nD. In Figure 2, why does the PacBio CLR data have more k-mers in the red region?\n\n\n\n3.3 Contamination\nDespite best intentions, non-target DNA is often included in whole genome sequencing experiments. The level of contaminant DNA may be altered by the organisms size, preservation, storage, parasitism, endosymbionts and other factors. It can be useful to screen sequencing read data for contamination. If the level is low it may be possible to filter out contaminant reads pre-assembly, or contaminant contigs post-assembly (although erroneous incorporation into the target genome is possible) (Koutsovoulos et al., 2016).\nHere’s a command that you could use to screen your sequencing reads for contaminant DNA.\n##Bash/command line code\n\nmash screen refseq.genomes.k21s1000.msh SRR18106304.fastq > screen.tab\nsort -gr screen.tab | head\n\nQ5:\nA. Do any of our datasets contain contaminant DNA?\nB. Should you filter out contaminant DNA before or after assembly?"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-assembly",
    "href": "Day1.html#dna-sequence-data-assembly",
    "title": "Day 1 - Genomics Overview",
    "section": "4. DNA sequence data: Assembly",
    "text": "4. DNA sequence data: Assembly\n\n4.1. Read QC\nPrior to assembly, it can be useful to check whether there are any potential issues with our data. One important consideration is adapter contamination. Adapters are runs of a known synthetic sequence that is often used as part of high throughput sequencing reactions. Sometimes traces of these synthetic sequences are present in sequencing reads and must be removed for the associated biological sequence.\nWe can use a tool called fastqc to generate a useful report, like this:\nfastqc SRR18106304.fastq\nWe can then view the resulting html file with a browser, like this:\nunzip SRR18106304_fastqc.zip\nfirefox SRR18106304_fastqc.html\nfastqc is designed to indicate when data doesn’t meet theoretical expectations, but this does not necessarily mean there is a problem with the data.\nIf we suspected that there might be some adapter contamination based on the fastqc results, we could use a trimming program to try and reduce the problem. Here is an example.\nbbduk.sh in=SRR18106304.fastq out=SRR18106304_clean.fastq ref=/pub66/samw/bin/miniconda3/envs/CR_workshop/opt/bbmap-39.00-0/resources/adapters.fa ktrim=l k=23 mink=11 hdist=1\n\nref = the fasta file of adapter sequences you want to remove\nktrim = whether the adapter is expected on the left (5-prime) or right (3-prime)\nk = the length of a k-mer used to identify contaminant sequence\nmink = look for shorter kmers of this length at the ends of reads\nhdist = allows a number of substitutions\n\n\n\n4.2. Contig generation\nThere are a number of algorithms that can be used to reconstruct genomic sequence from reads. Two of the most common are the de brujn graph, which utilises overlapping fixed-length k-mers to reconstruct the sequence. As previously discussed, k-mers have some useful properties for assembly, however they cannot resolve sequences that are repeated throughout the genome if they are longer then k (for example transposable elements).\n\nde brujn 1: The code below decomposes an input string “This is good, This is bad” into 7-mers. When we already know the order of these chunks we can lay them out as shown, to reconstruct the original string. But, what if we don’t know the original order?\n\n\n[1] \"  This is\"\n[1] \"   his is \"\n[1] \"    is is g\"\n[1] \"     s is go\"\n[1] \"       is goo\"\n[1] \"       is good\"\n[1] \"        s good,\"\n[1] \"          good, \"\n[1] \"          good, T\"\n[1] \"           ood, Th\"\n[1] \"            od, Thi\"\n[1] \"             d, This\"\n[1] \"              , This \"\n[1] \"                This i\"\n[1] \"                This is\"\n[1] \"                 his is \"\n[1] \"                  is is b\"\n[1] \"                   s is ba\"\n[1] \"                     is bad\"\n\n\n\n\nde brujn 2: This code attempts splits the 7-mers into two 6-mers corresponding to the left 6 prefix characters and the right 6 suffix characters. For example, the word “example” becomes “exampl” and “xample”. We can loop through all of the prefix 6-mers and find matches with suffix 6-mers, and thus reconstruct larger runs, as shown above. However, you will notice, that due to the repetition of the phrase “This is”, the graph has multiple valid paths.\n\n\n\n\n\n\n\nde brujn 3: This looks quite messy, there is a cyclical structure and a spur. There is no simple route through the graph. Let’s see what happens when we increase the k-mer length from 7-mers to 12-mers.\n\n\n\n\n\nLet’s have a go at running a full de bruijn graph assembly on the Illumina reads, using the program Spades. This program is able to use k-mers of multiple lengths and combine the resulting graphs for a more contiguous assembly.\n##Bash/command line code\nnohup spades.py -s SRR18106304.fastq -o ecoli_hiseq_spades &\n\n\nOLC 1: The Overlap Layout Consensus (OLC) method can be used which looks for overlaps between whole reads rather than the sub-sampled k-mers. As technological advances have enabled longer read lengths, OLC has become a popular method, since it can bridge repetitive sequences and therefore reconstruct longer contiguous sequences.\n\n\n\n\n\nLet’s have a go at running an OLC assembly using long high quality HiFi reads, using the program hifiasm. This program is able to utilise the high quality and long read lengths of HiFi data, to produce some of the highest quality genome reconstructions available, often without supplementary data.\n##Bash/command line code\nhifiasm -t 16 SRR10971019.fastq -o hifi_ecoli\nLet’s also have a go at running an OLC assembly using long nanopore (nanopore chemistry version 10.3) reads, using the program canu.\n##Bash/command line code\n~/bin/canu-1.9/Linux-amd64/bin/canu -p ecoli -d ecoli-oxford useGrid=false genomeSize=4.8m -nanopore-raw ERR3890216.fastq\n\n\nQ6:\nA. De brujn graphs are a useful method for which kind of data?\nB. Longer k-mers may help produce more contiguous assemblies. True or False?\nC. OLC graphs are a useful method for which kind of data?"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-post-assembly-qc",
    "href": "Day1.html#dna-sequence-data-post-assembly-qc",
    "title": "Day 1 - Genomics Overview",
    "section": "5. DNA sequence data: Post-Assembly QC",
    "text": "5. DNA sequence data: Post-Assembly QC\nNow that we have some assembled genomes using different datasets, we will explore them in some more detail. This should help you understand the strengths and weaknesses of the different data-types, and also how to assess different aspects of genome assembly quality.\nBefore we move on to some other checks we are going to run the program quast, which performs a range of checks for you. We can run this as indicated below. For the purposes of demonstration we will use a reference genome to check our data against, but for a novel genome assembly we would not have this data.\nFirst find an E. coli, reference genome on NCBI (https://www.ncbi.nlm.nih.gov/), as shown below.\n\n\n\n\n\n``` wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/005/845/GCF_000005845.2_ASM584v2/GCF_000005845.2_ASM584v2_genomic.fna.gz\n\n5.1. Assembly graphs and genome size.\nWe can visualise the assembly graphs for these three different datasets using the software Bandage. We use a specific file-type produced by some (but not all) genome assembly programs, known as a Graphical Fragment Assembly (.gfa) file. This format documents stretches of assembles sequence and also the relationship between contiguous runs, that may have multiple valid paths due to the presence of repetitive sequence or heterozygosity.\n\nFigure 3: A visualisation of the gfa file produced by Spades using the short Illumina read data. We can see that there is a tangle of valid paths, and also that the total length is higher than the size estimated from our earlier k-mer analysis. There are long stretches of contiguous sequence, which is useful genomic data, but the unresolved regions of the graph may inhibit some types of analysis. We would refer to this as a draft genome.\n\n\n\n\n\n\n\nFigure 4: In contrast, here is a visualisation of the “unitig” gfa file produced by canu using the nanopore data. We can see that, for the most part there is a single clean path (node), and that the total length is roughly the size we expect. After checking the final contig sequence file (fasta), the loop structure is resolved into a single circular genome.\n\n\n\n\n\n\n\nFigure 5: Here is a visualisation of the gfa file produced by hifiasm using the PacBio HiFi dataset. We can see that this data is able to resolve the genome into a single closed loop.\n\n\n\n\n\n\n\n\n5.2. Gene content\nWe can check the quality of an assembly, by checking whether “conserved” genes are present in our assemblies (see paper for details). Using the software BUSCO (Benchmarking Universal Single-Copy Orthologs), we can generate some information about whether genes are present or absent, fragmented across contigs, or whether they’re present in the right number.\n##Bash/command line code busco -m genome -i /scratch/ecoli_hiseq_spades/scaffolds.fasta -o Hiseq_busco --auto-lineage-prok`\n\n\n5.3. k-mer content\nAnother way to check the quality of a genome assembly, without having to rely on genes, is to compare the k-mer content that we saw in the raw reads to the k-mers present in the finished genome assembly. We can use the k-mer analysis toolkit to do this.\nkat comp -t 16 -o SRR18106304_vs_spades SRR18106304.fastq ecoli_hiseq_spades/scaffolds.fasta\n\n\n\n\n\nHere we can see the same distribution we observed earlier, however now we have colours added, which indicate how many times k-mers occur in the assembled genome. We can see here on the left hand side that many of the error k-mers are shown in black. This means the k-mers are not present in the assembly, which is good news. However, we can also see that some of these error k-mers are shown in red, which means there are some sequence errors still present in the draft assembly.\nIn comparison here is the same plot for the HiFi assembly.\n\n\n\n\n\nNow we can see that there are much less k-mers in the left hand peak present in the assembly. although we can see that a small number of k-mers in the right hand peak contains a small amount of purple duplicated k-mers!\n\n\n6.1. More complex genomes\nIn haploid organisms such as our example, E. coli, assembly graphs may suggest multiple paths through a given sequence, but we know that there is only one valid path through the graph. In diploid (and polyploid) organisms, this becomes more complicated because there are more than one real biological paths through the graph. These alternate paths are due to the presence of sister chromatids, that are not identical to each other, due to the presence of genetic variation, or heterozygosity. A key factor in assembling high quality genome assemblies, is the “phasing” of the chromosomes. It can be difficult to distinguish whether a given heterozygous region belongs to one chromosome copy or the other. Variation found along the same chromosome is in “linkage” or can be said to have the same “phase”. A perfect genome assembly would reconstruct the variation from each chromosome perfectly as found in the original organism, however in practice this can be difficult to achieve. The figures below should help to explain this problem and the potential solutions.\n\nFigure 6: A common result from sequencing diploid genomes is the presence of redundant haplotypes in the final assembly, particularly for regions with have a high sequence divergence. Here we can see homozygous regions in orange, and a reconstructed reference contig which contains a mosaic of haplotypes from two different sister chromatids (indicated in yellow and blue).\n\n\n\n\n\n\n\nFigure 7: One method of resolving heterozygosity in a genome sequencing project is to gather parental data and use this to partition the chromatids inherited by the F1 offspring. In this example, we generated long reads for an F1 individual and short Illumina reads for the parents. We were able to use the Illumina reads to separate the F1 PacBio reads into two groups for assembly.\n\n\n\n\n\n\n\nFigure 7: Another way to utilise parental data is to use the k-mers during the construction of the assembly graph itself. Specifically, we can identify bubble structures that are likely to represent heterozygous regions and look for parent specific k-0mers in the alternate paths. Crucially, this approach requires high accuracy long reads such as HiFi data to work successfully.\n\n\n\n\n\n\nReferences:\n[1] E. A. Ellis, C. G. Storer, and A. Y. Kawahara, “De novo genome assemblies of butterflies,” Gigascience, vol. 10, no. 6, pp. 1–8, 2021.\n[2] S. Celton-Morizur and C. Desdouets, Polyploidization of liver cells, vol. 676. 2010.\n[3] S. E. Aamidor, B. Yagound, I. Ronai, and B. P. Oldroyd, “Sex mosaics in the honeybee: How haplodiploidy makes possible the evolution of novel forms of reproduction in social Hymenoptera,” Biol. Lett., vol. 14, no. 11, 2018.\nhttps://www.pnas.org/doi/10.1073/pnas.1600338113"
  },
  {
    "objectID": "Day1.html#introduction",
    "href": "Day1.html#introduction",
    "title": "Day 1 - Genomics Overview",
    "section": "Introduction",
    "text": "Introduction\nToday we will be discussing and performing Genome assembly. Assembly refers to the translation of raw sequencing data into a representation of the source DNA genome. You will learn about the types of data and algorithms you can use to accomplish this, their advantages and disadvantages and how you might accomplish this. Since this is the first day of the workshop, we will also spend some time covering the Unix command line environment and how you can interact with it during this workshop.\n1. Logging on to the computing environment\n2. DNA sequence data: Platforms & Formats\n3. DNA sequence data: Pre-Assembly QC\n4. DNA sequence data: Assembly\n5. DNA sequence data: Post-Assembly QC"
  },
  {
    "objectID": "Day1.html#widget-value",
    "href": "Day1.html#widget-value",
    "title": "Shiny in Quarto",
    "section": "Widget value",
    "text": "Widget value\n\n\n\n\nverbatimTextOutput(\"radio_output\")\n\n\n\n\n\n\nvars <- setdiff(names(iris), \"Species\")\nselectInput('xcol', 'X Variable', vars)\n\n\nX Variable\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\n\n\n\n\nselectInput('ycol', 'Y Variable', vars, selected = vars[[2]])\n\n\nY Variable\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\n\n\n\n\nnumericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n\n\nCluster count\n\n\n\n\n\n\n\nplotOutput('plot1')"
  },
  {
    "objectID": "Day2.html",
    "href": "Day2.html",
    "title": "Day 2",
    "section": "",
    "text": "In the previous session, we used some different data types produced by different technologies to reconstruct the full DNA complement of a target organism. Today, we will do some more work on the resulting genomes and try and assess how good our constructions are. We will use some concepts covered in the last session, such as k-mers, but we will also start to incorporate information about functional elements such as genes. Before we do that, it’s important to recap on what a genome contains, and how it functions.\nThe DNA sequence of an organism is sometimes referred to as the data storage structure of living organisms. This storage contains a dizzying variety of features: Their are sequences that can be transcribed into various species of RNA. Some of these RNA molecules can be active in their own right, such as micro-RNA or CRISPR sequences. Other transcribed sequences go on to be translated into strings of amino-acids, that ultimately produce functional proteins.\n\n\n\n\n\n\n\nMany regions of DNA are not typically converted into other types of biomolecule, however they can still confer important structural properties (e.g. centromeres or telomeres), or provide regulation of the regions that are transcribed (e.g. promoters or enhancers). Genomes are also full of viral and non-viral mobile DNA sequences such as transposable elements, the differing activities of these mobile sequences are fascinating in their own right, and can have mutagenic activities, with important implications for evolutionary biology.\nGenome annotation refers broadly to the identification of the various features in a genome sequence. Additional data is often used to achieve this. Rather than generate sequencing read data from genomic DNA, we can use the same technology to capture a sample of an organisms RNA. “Mapping” this data (aligning the RNA sequencing reads to a genome assembly), can provide evidence for the locations of transcribed sequence including their, start, end and gene splicing events. Based on the sequences within these annotations we can then predict resulting amino-acid sequences, and in some cases the three-dimensional structure of the resulting proteins.\nHere is a genome browser displaying annotations for an E. coli reference genome, have a go at zooming in to see the various annotations on the genome, and then further to the nucleotide sequence:"
  },
  {
    "objectID": "Day2.html#post-assembly-qc",
    "href": "Day2.html#post-assembly-qc",
    "title": "Day 2",
    "section": "5. Post-Assembly QC",
    "text": "5. Post-Assembly QC\nNow that we have some assembled genomes from the previous session, we will explore them in some more detail. This should help you understand the strengths and weaknesses of the different data-types, and also how to assess different aspects of genome assembly quality.\nBoth Canu and Spades should have produced directories full of various files. Hifiasm should also produce output files, but for this program we need to do an additional step to generate a “fasta” file from the “gfa” file.\nawk '/^S/{print \">\"$2;print $3}' hifi_ecoli.p_ctg.gfa > hifi_ecoli.p_ctg.fa\n\n5.1. Assembly graphs and genome size.\nWe can visualise the assembly graphs for these three different datasets using the software Bandage. We use a specific file-type produced by some (but not all) genome assembly programs, known as a Graphical Fragment Assembly (.gfa) file. This format documents stretches of assembles sequence and also the relationship between contiguous runs, that may have multiple valid paths due to the presence of repetitive sequence or heterozygosity.\nYou can load bandage by:\n\ntyping the command “Bandage” into the unix command prompt.\nA window should open.\nYou can click File, then load graph, and you should be able to select a gfa file from one of your assemblies.\n\n\nFigure 3: A visualisation of the gfa file produced by Spades using the short Illumina read data. We can see that there is a tangle of valid paths, and also that the total length is higher than the size estimated from our earlier k-mer analysis. There are long stretches of contiguous sequence, which is useful genomic data, but the unresolved regions of the graph may inhibit some types of analysis. We would refer to this as a draft genome.\n\n\n\n\n\n\n\nFigure 4: In contrast, here is a visualisation of the “unitig” gfa file produced by canu using the nanopore data. We can see that, for the most part there is a single clean path (node), and that the total length is roughly the size we expect. After checking the final contig sequence file (fasta), the loop structure is resolved into a single circular genome.\n\n\n\n\n\n\n\nFigure 5: Here is a visualisation of the gfa file produced by hifiasm using the PacBio HiFi dataset. We can see that this data is able to resolve the genome into a single closed loop.\n\n\n\n\n\n\n\n\n5.2. k-mer content\nAnother way to check the quality of a genome assembly, without having to rely on genes, is to compare the k-mer content that we saw in the raw reads to the k-mers present in the finished genome assembly. We can use the k-mer analysis toolkit to do this.\nkat comp -t 16 -o SRR18106304_vs_spades SRR18106304.fastq ecoli_hiseq_spades/scaffolds.fasta\n\n\n\n\n\nHere we can see the same distribution we observed earlier, however now we have colours added, which indicate how many times k-mers occur in the assembled genome. We can see here on the left hand side that many of the error k-mers are shown in black. This means the k-mers are not present in the assembly, which is good news. However, we can also see that some of these error k-mers are shown in red, which means there are some sequence errors still present in the draft assembly.\nIn comparison here is the same plot for the HiFi assembly.\n\n\n\n\n\nNow we can see that there are much less k-mers in the left hand peak present in the assembly. although we can see that a small number of k-mers in the right hand peak contains a small amount of purple duplicated k-mers!\n\n\n5.2. Gene content\nWe can check the quality of an assembly, by checking whether “conserved” genes are present in our assemblies (see paper for details). Using the software BUSCO (Benchmarking Universal Single-Copy Orthologs), we can generate some information about whether genes are present or absent, fragmented across contigs, or whether they’re present in the right number.\nHere we are performing a specific type of genome annotation, which attempts to identify a specific set of conserved genes, that are often only present in a single copy. If some of these genes are missing, it provides some evidence that our genome assembly may not be complete. Alternatively if these genes are found more than once, it provides some evidence that our assembly may have incorrectly duplicated some genomic regions.\n##Bash/command line code \nbusco -m genome -i /scratch/ecoli_hiseq_spades/scaffolds.fasta -o Hiseq_busco --auto-lineage-prok\nHave a browse through the output files in the output folder Hiseq_busco and see if you can find out how complete this genome assembly is. You can also generate an analysis for the other genomes you assembled yesterday (make sure to change the name of the output file!) and compare the results.\n\n\n5.4. Quast report\nBefore we move on to some other checks we are going to run the program quast, which performs a range of checks for you. We can run this as indicated below. For the purposes of demonstration we will use a reference genome to check our data against, but for a novel genome assembly we would not have this data.\nWe are going to run this software with another form of annotation, to help us assess the quality of our genome assemblies. The Glimmer method is specifically designed to detect prokaryotic genes, without the need for additional data.\n\nFirst find an E. coli k-12 reference genome on NCBI (https://www.ncbi.nlm.nih.gov/), as shown below.\n\n\n\n\n\nSelect one of the resulting genome assemblies.\nNow click on the link on the right hand side of the page labelled “FTP directory for RefSeq assembly”\nHere you can see a range of information including the genomic sequence files annotations and other associated statistics.\nRight click on the file with the suffix “_genomic.fna.gz” and copy the link.\nNow in your Unix terminal navigate to your home directory and paste the link after a “wget command”, in the same format as below (make sure to paste in the correct link that you’ve copied).\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/005/845/GCF_example/GCF_example_genomic.fna.gz\nNow you are ready to run quast with your three previously assembled genomes.\nquast -r GCF_000005845.2_ASM584v2_genomic.fna –circos –gene-finding –output-dir test_quast ./Hifi_ecoli.fa ./ecoli-oxford/ecoli.contigs.fasta ./ecoli_hiseq_spades/scaffolds.fasta\nHave a look at the quast report by loading the html file.\nfirefox test_quast/report.html"
  },
  {
    "objectID": "Day2.html#more-complex-genomes",
    "href": "Day2.html#more-complex-genomes",
    "title": "Day 2",
    "section": "6. More complex genomes",
    "text": "6. More complex genomes\nSo far we have only considered a haploid bacterial genome, with a very small overall size. In such simple genomes an assembly graphs may suggest multiple paths through a given sequence due to repeating sequence, but we know that there is likely only one biologically real path through the graph. In diploid (and polyploid) organisms, this becomes more complicated because there are more than one real biological paths through the graph. These alternate paths are due to the presence of sister chromatids, that are not identical to each other, due to the presence of genetic variation, or heterozygosity. A key factor in assembling high quality genome assemblies, is the “phasing” of the chromosomes. It can be difficult to distinguish whether a given heterozygous region belongs to one chromosome copy or the other. Variation found on the same chromosome copy is in “linkage” or can be said to have the same “phase”. A perfect genome assembly would reconstruct the variation from each chromosome perfectly as found in the original organism, however in practice this can be difficult to achieve. The figures below should help to explain this problem and explain potential solutions.\n\nFigure 6: A common result from sequencing diploid genomes is the presence of redundant haplotypes in the final assembly, particularly for regions with have a high sequence divergence. Here we can see homozygous regions in orange, and a reconstructed reference contig which contains a mosaic of haplotypes from two different sister chromatids (indicated in yellow and blue).\n\n\n\n\n\n\n\nFigure 7: One method of resolving heterozygosity in a genome sequencing project is to gather parental data and use this to partition the chromatids inherited by the F1 offspring. In this example, we generated long reads for an F1 individual and short Illumina reads for the parents. We were able to use the Illumina reads to separate the F1 PacBio reads into two groups for assembly.\n\n\n\n\n\n\n\nFigure 7: Another way to utilise parental data is to use the k-mers during the construction of the assembly graph itself. Specifically, we can identify bubble structures that are likely to represent heterozygous regions and look for parent specific k-mers in the alternate paths. Crucially, this approach requires high accuracy long reads such as HiFi data to work successfully."
  },
  {
    "objectID": "Day1.html#pre-assembly-qc",
    "href": "Day1.html#pre-assembly-qc",
    "title": "Day 1",
    "section": "3. Pre-Assembly QC",
    "text": "3. Pre-Assembly QC\nThe type of sequencing and assembly you may want to do can depend on your study organism. Some species have intrinsically more or less complex genomes. There are a few important considerations that can inform your strategy, but sometimes it is difficult to know what these may be without data. Some major considerations are; sequencing coverage, ploidy, heterozygosity, repeat density and repeat structure.\n\n3.1. Sequencing coverage\nSequencing coverage is the number of times that any given base-pair in your genome appears in your sequencing read data. Put another way, it is the ratio of sequence read data to actual genome size, so if we imagine a 100Mbp haploid genome and we have 1Gbp of sequencing data, we would estimate that we have a sequencing coverage of 10. In practice, this estimate is usually roughly accurate for the median coverage value, but due to the random probability of sampling in combination with sequencing bias, coverage varies according to a distribution.\nLet’s have a look at our datasets again. First, let’s have a look at the basic statistics for the HiFi data using the BBTools suite. The command is written like this:\n##Bash/command line code\nreformat.sh in1=SRR10971019.fastq lhist=HiFi_length.txt\nTo help you get started I will give you an example SLURM script which you can copy to run this command:\n#!/bin/bash\n#SBATCH --job-name=bb_reformat\n#SBATCH --output=reformat_result.txt\n#SBATCH --partition=nu-wide\n#SBATCH --ntasks=1\n#SBATCH --time=0:10:00\n\nmodule load bbmap/37.36\n\nsrun reformat.sh in1=/home/taller-2019/Workshop_materials/SRR10971019.fastq lhist=HiFi_length.txt\n\n\n\n\n\n\nRemember to run the SLURM script with “sbatch”!\n\n\n\n\n\n\nThis should only take a minute or two to run, and you can then view the resulting output file, like this:\nless reformat_result.txt\nWe can see that we have 95,514 reads and roughly 1.4Gbp in total. This command also prints a histogram of read lengths to the file “HiFi_length.txt”. You can try downloading this file to your local computer using a command like.\nscp username@kabre.cenat.ac.cr:~/HiFi_length.txt ~/Desktop\nYou can then try to plot this data using R, if you are interested in visualisation.\n##R code\nlibrary(ggplot2)\nHiFi_hist <- read.table(\"HiFi_length.txt\")\nggplot(data=HiFi_hist,aes(x=V1,y=V2)) + geom_col()\nA very useful initial QC procedure to follow is to break down sequencing reads into short (e.g. 21 nucleotide) overlapping sub-strings called k-mers (in this case we would call them 21-mers) to allow us to get a more accurate assessment of genome properties. k-mers are useful because some sequencing reads contain errors. By breaking down reads into sub-strings, we can distinguish technical errors from biological sequence based on the number of times they appear in the dataset (error k-mers hould be very rare, whereas “real” biological data should appear at a frequency dependent on the sequencing coverage).\nLet’s have a look at the k-mer content to find out more about our dataset and our organism. Here’s how you could generate a 21-mer histograms for the data we downloaded earlier, using the program jellyfish.\n##Bash/command line code\njellyfish count -t 20 -m21 -C -s 10G -o ecoli_HiSeqX.jf21 SRR18106304.fastq\njellyfish histo -o ecoli_HiSeqX.histo ecoli_HiSeqX.jf21\n\n##R code\nlibrary(ggplot2)\nHiSeq_kmers <- read.table(\"ecoli_HiSeqX.histo\")\n#you may need to adjust the x and y axis limits, depending on the data.\nggplot(data=HiSeq_kmers,aes(x=V1,y=V2)) + geom_point() + xlim(0,500) + ylim(0,100000)\nWe can also feed our data into another program (genomescope), which is able to fit a model to the histogram and calculate some predictions about the genome properties, such as genome size, heterozygosity (if present), repetitiveness and sequencing coverage.\n##Bash/command line code\ngenomescope.R ecoli_HiSeqX.histo 21 150 hiseq_genomescope\n\n\n\n\n\n\nQ3: For each dataset:\nA. How much total sequencing data do we have for each dataset?\nB. What is the estimated size of this genome?\nC. What is the approximate sequencing coverage for each dataset?\nD. Which dataset has the highest error rate?\n\n\n\n3.2. Ploidy\nPloidy refers to the number of chromosome copies that an organism has. A single copy is haploid, two copies of a chromosome is diploid (most sexually reproducing organisms are diploid), however higher numbers of copies (the general term is polyploid) are commonly found in nature, particularly in plants.\nIt is important to note that different ploidy states can exist within an organism - In humans for example, the autosomes are most often diploid, the mitochondrial genome is most often haploid, and the X chromosome can be either haploid or diploid.\nIn addition, ploidy levels can vary between different tissues. Some cells found in the liver are normally polyploid and karyotype alterations have also been linked to cancerous tissues. In another case, Honey bees can have entirely haploid autosomes (which initiates male development) or diploid autosomes (which initiates female development). Choosing which individual and tissue to sample for whole genome sequencing is a crucial decision!\n\nFigure 2: k-mer histograms showing the characteristic double peak of a diploid organism, with the homozygous peak region indicated in green, the heterozygous peak region indicated in blue and the error region peak indicated in red. Notice the difference in the error region, between the Illumina and the PacBio CLR read data.\n\n\n\n\n\n\n\n\nQ4:\nA. Our datasets represent a genome with what type of ploidy?\nB. The data for a different organism shown in Figure 2, has what type of ploidy?\nC. An organism with more than two copies of each Chromosome, has what type of ploidy?\nD. In Figure 2, why does the PacBio CLR data have more k-mers in the red region?\n\n\n\n3.3 Contamination/Endosymbionts\nDespite best intentions, non-target DNA is often included in whole genome sequencing experiments. The level of contaminant DNA may be altered by the organisms size, preservation, storage, parasitism, endosymbionts and other factors. It can be useful to screen sequencing read data for contamination. If the level is low it may be possible to filter out contaminant reads pre-assembly, or contaminant contigs post-assembly (although erroneous incorporation into the target genome is possible) (Koutsovoulos et al., 2016).\nHere’s a program called mash, that you could use to screen your sequencing reads for contaminant DNA.\n##Bash/command line code\n\nmash screen refseq.genomes.k21s1000.msh SRR18106304.fastq > screen.tab\nsort -gr screen.tab | head\n\nQ5:\nA. Do any of our datasets contain contaminant DNA?\nB. Should you remove out contaminant sequencing reads before or after assembly?"
  },
  {
    "objectID": "Day1.html#assembly",
    "href": "Day1.html#assembly",
    "title": "Day 1",
    "section": "4. Assembly",
    "text": "4. Assembly\n\n4.1. Read QC\nPrior to assembly, it can be useful to check whether there are any potential issues with our data. One important consideration is adapter contamination. Adapters are runs of a known synthetic sequence that is often used as part of high throughput sequencing reactions. Sometimes traces of these synthetic sequences are present in sequencing reads and must be removed for the associated biological sequence.\nWe can use a tool called fastqc to generate a useful report, like this:\nfastqc SRR18106304.fastq\nWe can then view the resulting html file with a browser, like this:\nunzip SRR18106304_fastqc.zip\nfirefox SRR18106304_fastqc.html\nfastqc is designed to indicate when data doesn’t meet theoretical expectations, but this does not necessarily mean there is a problem with the data.\nIf we suspected that there might be some adapter contamination based on the fastqc results, we could use a trimming program to try and reduce the problem. Here is an example.\nbbduk.sh in=SRR18106304.fastq out=SRR18106304_clean.fastq ref=/home/taller-2019/Workshop_materials/adapters.fa ktrim=l k=23 mink=11 hdist=1\n\nref = the fasta file of adapter sequences you want to remove\nktrim = whether the adapter is expected on the left (5-prime) or right (3-prime)\nk = the length of a k-mer used to identify contaminant sequence\nmink = look for shorter kmers of this length at the ends of reads\nhdist = allows a number of substitutions\n\n\n\n4.2. Contig generation\nThere are a number of algorithms that can be used to reconstruct genomic sequence from reads. Two of the most common are the de brujn graph, which utilises overlapping fixed-length k-mers to reconstruct the sequence. As previously discussed, k-mers have some useful properties for assembly, however they cannot resolve sequences that are repeated throughout the genome if they are longer then k (for example transposable elements).\n\nde brujn 1: The code below decomposes an input string “This is good, This is bad” into 7-mers. When we already know the order of these chunks we can lay them out as shown, to reconstruct the original string. But, what if we don’t know the original order?\n\n\n[1] \"  This is\"\n[1] \"   his is \"\n[1] \"    is is g\"\n[1] \"     s is go\"\n[1] \"       is goo\"\n[1] \"       is good\"\n[1] \"        s good,\"\n[1] \"          good, \"\n[1] \"          good, T\"\n[1] \"           ood, Th\"\n[1] \"            od, Thi\"\n[1] \"             d, This\"\n[1] \"              , This \"\n[1] \"                This i\"\n[1] \"                This is\"\n[1] \"                 his is \"\n[1] \"                  is is b\"\n[1] \"                   s is ba\"\n[1] \"                     is bad\"\n\n\n\n\nde brujn 2: This code attempts splits the 7-mers into two 6-mers corresponding to the left 6 prefix characters and the right 6 suffix characters. For example, the word “example” becomes “exampl” and “xample”. We can loop through all of the prefix 6-mers and find matches with suffix 6-mers, and thus reconstruct larger runs, as shown above. However, you will notice, that due to the repetition of the phrase “This is”, the graph has multiple valid paths.\n\n\n\n\n\n\n\nde brujn 3: This looks quite messy, there is a cyclical structure and a spur. There is no simple route through the graph. Let’s see what happens when we increase the k-mer length from 7-mers to 12-mers.\n\n\n\n\n\nLet’s have a go at running a full de bruijn graph assembly on the Illumina reads, using the program Spades. This program is able to use k-mers of multiple lengths and combine the resulting graphs for a more contiguous assembly.\n##Bash/command line code\nnohup spades.py -s SRR18106304.fastq -o ecoli_hiseq_spades &\n\n\nOLC 1: The Overlap Layout Consensus (OLC) method can be used which looks for overlaps between whole reads rather than the sub-sampled k-mers. As technological advances have enabled longer read lengths, OLC has become a popular method, since it can bridge repetitive sequences and therefore reconstruct longer contiguous sequences.\n\n\n\n\n\nLet’s have a go at running an OLC assembly using long high quality HiFi reads, using the program hifiasm. This program is able to utilise the high quality and long read lengths of HiFi data, to produce some of the highest quality genome reconstructions available, often without supplementary data (like HiC).\n##Bash/command line code\nhifiasm -t 16 SRR10971019.fastq -o hifi_ecoli\nLet’s also have a go at running an OLC assembly using long nanopore (nanopore chemistry version 10.3) reads, using the program canu.\n##Bash/command line code\ncanu -p ecoli -d ecoli-oxford useGrid=false genomeSize=4.8m -nanopore-raw ERR1674581.fastq\n\n\nQ6:\nA. De brujn graphs are a useful method for which kind of data?\nB. Longer k-mers may help produce more contiguous assemblies. True or False?\nC. OLC graphs are a useful method for which kind of data?"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/ipykernel-6.16.2.dist-info/licenses/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/ipykernel-6.16.2.dist-info/licenses/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2015, IPython Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the IPython Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe IPython Development Team is the set of all contributors to the IPython project. This includes all of the IPython subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/ipython/.\n\n\n\nIPython uses a shared copyright model. Each contributor maintains copyright over their contributions to IPython. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the IPython source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire IPython Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the IPython repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/QtPy-2.2.1.dist-info/AUTHORS.html",
    "href": "my_env/lib/python3.7/site-packages/QtPy-2.2.1.dist-info/AUTHORS.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)\n\n\n\n\n\nDaniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)\n\n\n\n\n\nThe QtPy Contributors"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/soupsieve-2.3.2.post1.dist-info/license_files/LICENSE.html",
    "href": "my_env/lib/python3.7/site-packages/soupsieve-2.3.2.post1.dist-info/license_files/LICENSE.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Copyright (c) 2018 - 2022 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/pyzmq-24.0.1.dist-info/AUTHORS.html",
    "href": "my_env/lib/python3.7/site-packages/pyzmq-24.0.1.dist-info/AUTHORS.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This project was started and continues to be led by Brian E. Granger (ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT com) is the primary developer of pyzmq at this time.\nThe following people have contributed to the project:\n\nAlexander Else (alexander DOT else AT team DOT telstra DOT com)\nAlexander Pyhalov (apyhalov AT gmail DOT com)\nAlexandr Emelin (frvzmb AT gmail DOT com)\nAmr Ali (amr AT ledgerx DOT com)\nAndre Caron (andre DOT l DOT caron AT gmail DOT com)\nAndrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\nAndrew Gwozdziewycz (git AT apgwoz DOT com)\nBaptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\nBrandyn A. White (bwhite AT dappervision DOT com)\nBrian E. Granger (ellisonbg AT gmail DOT com)\nBrian Hoffman (hoffman_brian AT bah DOT com)\nCarlos A. Rocha (carlos DOT rocha AT gmail DOT com)\nChris Laws (clawsicus AT gmail DOT com)\nChristian Wyglendowski (christian AT bu DOT mp)\nChristoph Gohlke (cgohlke AT uci DOT edu)\nCurtis (curtis AT tinbrain DOT net)\nCyril Holweck (cyril DOT holweck AT free DOT fr)\nDan Colish (dcolish AT gmail DOT com)\nDaniel Lundin (dln AT eintr DOT org)\nDaniel Truemper (truemped AT googlemail DOT com)\nDouglas Creager (douglas DOT creager AT redjack DOT com)\nEduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\nEren Güven (erenguven0 AT gmail DOT com)\nErick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\nErik Tollerud (erik DOT tollerud AT gmail DOT com)\nFELD Boris (lothiraldan AT gmail DOT com)\nFantix King (fantix DOT king AT gmail DOT com)\nFelipe Cruz (felipecruz AT loogica DOT net)\nFernando Perez (Fernando DOT Perez AT berkeley DOT edu)\nFrank Wiles (frank AT revsys DOT com)\nFélix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\nGavrie Philipson (gavriep AT il DOT ibm DOT com)\nGodefroid Chapelle (gotcha AT bubblenet DOT be)\nGreg Banks (gbanks AT mybasis DOT com)\nGreg Ward (greg AT gerg DOT ca)\nGuido Goldstein (github AT a-nugget DOT de)\nIan Lee (IanLee1521 AT gmail DOT com)\nIonuț Arțăriși (ionut AT artarisi DOT eu)\nIvo Danihelka (ivo AT danihelka DOT net)\nIyed (iyed DOT bennour AT gmail DOT com)\nJim Garrison (jim AT garrison DOT cc)\nJohn Gallagher (johnkgallagher AT gmail DOT com)\nJulian Taylor (jtaylor DOT debian AT googlemail DOT com)\nJustin Bronder (jsbronder AT gmail DOT com)\nJustin Riley (justin DOT t DOT riley AT gmail DOT com)\nMarc Abramowitz (marc AT marc-abramowitz DOT com)\nMatthew Aburn (mattja6 AT gmail DOT com)\nMichel Pelletier (pelletier DOT michel AT gmail DOT com)\nMichel Zou (xantares09 AT hotmail DOT com)\nMin Ragan-Kelley (benjaminrk AT gmail DOT com)\nNell Hardcastle (nell AT dev-nell DOT com)\nNicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\nNicholas Piël (nicholas AT nichol DOT as)\nNick Pellegrino (npellegrino AT mozilla DOT com)\nNicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\nOndrej Certik (ondrej AT certik DOT cz)\nPaul Colomiets (paul AT colomiets DOT name)\nPawel Jasinski (pawel DOT jasinski AT gmail DOT com)\nPhus Lu (phus DOT lu AT gmail DOT com)\nRobert Buchholz (rbu AT goodpoint DOT de)\nRobert Jordens (jordens AT gmail DOT com)\nRyan Cox (ryan DOT a DOT cox AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nScott Maxwell (scott AT codecobblers DOT com)\nScott Sadler (github AT mashi DOT org)\nSimon Knight (simon DOT knight AT gmail DOT com)\nStefan Friesel (sf AT cloudcontrol DOT de)\nStefan van der Walt (stefan AT sun DOT ac DOT za)\nStephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\nSylvain Corlay (scorlay AT bloomberg DOT net)\nThomas Kluyver (takowl AT gmail DOT com)\nThomas Spura (tomspur AT fedoraproject DOT org)\nTigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\nTorsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\nVadim Markovtsev (v DOT markovtsev AT samsung DOT com)\nYannick Hold (yannickhold AT gmail DOT com)\nZbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\nhugo shi (hugoshi AT bleb2 DOT (none))\njdgleeson (jdgleeson AT mac DOT com)\nkyledj (kyle AT bucebuce DOT com)\nspez (steve AT hipmunk DOT com)\nstu (stuart DOT axon AT jpcreative DOT co DOT uk)\nxantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\nwith some adjustments.\n\n\n\nBrandon Craig-Rhodes (brandon AT rhodesmill DOT org)\nEugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\nCraig Austin (craig DOT austin AT gmail DOT com)\n\n\n\n\n\nTravis Cline (travis DOT cline AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nZachary Voase (z AT zacharyvoase DOT com)"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbformat-5.7.0.dist-info/licenses/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/nbformat-5.7.0.dist-info/licenses/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/jupyter_server-1.21.0.dist-info/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/jupyter_server-1.21.0.dist-info/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
    "href": "my_env/lib/python3.7/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "http://www.famfamfam.com/lab/icons/silk/\nLicense: CC-BY-2.5 or CC-BY-3.0"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/jupyter_client-7.4.4.dist-info/licenses/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/jupyter_client-7.4.4.dist-info/licenses/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/idna-3.4.dist-info/LICENSE.html",
    "href": "my_env/lib/python3.7/site-packages/idna-3.4.dist-info/LICENSE.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Copyright (c) 2013-2021, Kim Davies All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/UnicodePy3.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/UnicodePy3.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "☃"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/update-display-id.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/update-display-id.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "8\n\n\n6\n\n\n8\n\n\n\n\n6\n\n\n\n\n8\n\n\n10"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Interrupt.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Interrupt.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "done"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Factorials.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Factorials.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "2\n3\n5\n8\n13\n21\n34\n55\n89\n144"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "ok"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Output.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Output.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "hi\n\n\n\n\n\n\n\n\n\nhi2\n\n\n\n\n\n\n\n\n\nhi3\n\n\n\n\n\n\n\n\n\nhi4"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Clear Output.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Clear Output.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Hello world\n\n\n\n\nworld\n\n\n\n\n'Hello world'\n\n\n\n\n'world'\n\n\n\n\n'Hello world'\n\n\n\n\nworld"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This notebook uses a file system based “lock” to assert that two instances of the notebook kernel will run in parallel. Each instance writes to a file in a temporary directory, and then tries to read the other file from the temporary directory, so that running them in sequence will fail, but running them in parallel will succeed.\nTwo notebooks are launched, each which sets the this_notebook variable. One notebook is set to this_notebook = 'A' and the other this_notebook = 'B'."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Empty Cell.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Empty Cell.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "'Code 1'\n\n\n\n\n'Code 2'"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "ok"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "This notebook uses a file system based “lock” to assert that two instances of the notebook kernel will run in parallel. Each instance writes to a file in a temporary directory, and then tries to read the other file from the temporary directory, so that running them in sequence will fail, but running them in parallel will succeed.\nTwo notebooks are launched, each which sets the this_notebook variable. One notebook is set to this_notebook = 'A' and the other this_notebook = 'B'."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Unicode.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Unicode.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "☃"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/HelloWorld.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/HelloWorld.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Hello World"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Error.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Error.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "ZeroDivisionError: division by zero"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "href": "my_env/lib/python3.7/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "ok"
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/jupyter_core-4.11.2.dist-info/licenses/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/jupyter_core-4.11.2.dist-info/licenses/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Jupyter is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects. A full list with details is kept in the documentation directory, in the file about/credits.txt.\nThe core team that coordinates development on GitHub can be found here: https://github.com/ipython/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. It is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "href": "my_env/lib/python3.7/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "The first line simply reloads matplotlib, uses the nbagg backend and then reloads the backend, just to ensure we have the latest modification to the backend code. Note: The underlying JavaScript will not be updated by this process, so a refresh of the browser after clearing the output and saving is necessary to clear everything fully.\n\n\nShould produce a figure window which is interactive with the pan and zoom buttons. (Do not press the close button, but any others may be used).\n\n\n\nAs above, a new figure should be created.\n\n\n\nThe printout should show that there are two figures which have active CommSockets, and no figures pending show.\n\n\n\nClosing a specific figure instance should turn the figure into a plain image - the UI should have been removed. In this case, scroll back to the first figure and assert this is the case.\n\n\n\nSimply doing a plt.plot should not show a new figure, nor indeed update an existing one (easily verified in UAT 6). The output should simply be a list of Line2D instances.\n\n\n\nWe just created a new figure, but didn’t show it. Connection info should no longer have “Figure 1” (as we closed it in UAT 4) and should have figure 2 and 3, with Figure 3 without any connections. There should be 1 figure pending.\n\n\n\nWe should be able to show a figure we’ve previously created. The following should produce two figure windows.\n\n\n\nIn interactive mode, creating a line should result in a figure being shown.\nSubsequent lines should be added to the existing figure, rather than creating a new one.\nCalling connection_info in interactive mode should not show any pending figures.\nDisable interactive mode again.\n\n\n\nUnlike most of the other matplotlib backends, we may want to see a figure multiple times (with or without synchronisation between the views, though the former is not yet implemented). Assert that plt.gcf().canvas.manager.reshow() results in another figure window which is synchronised upon pan & zoom.\n\n\n\nSaving the notebook (with CTRL+S or File->Save) should result in the saved notebook having static versions of the figues embedded within. The image should be the last update from user interaction and interactive plotting. (check by converting with ipython nbconvert <notebook>)\n\n\n\nCreate a figure, show it, then create a new axes and show it. The result should be a new figure.\nBUG: Sometimes this doesn’t work - not sure why (@pelson).\n\n\n\nShould produce a new figure and plot it."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "href": "my_env/lib/python3.7/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "title": "Genomics Workshop 2022",
    "section": "UAT 13 - Animation",
    "text": "UAT 13 - Animation\nThe following should generate an animated line:\n\nUAT 14 - Keyboard shortcuts in IPython after close of figure\nAfter closing the previous figure (with the close button above the figure) the IPython keyboard shortcuts should still function.\n\n\nUAT 15 - Figure face colours\nThe nbagg honours all colours apart from that of the figure.patch. The two plots below should produce a figure with a red background. There should be no yellow figure.\n\n\nUAT 16 - Events\nPressing any keyboard key or mouse button (or scrolling) should cycle the line line while the figure has focus. The figure should have focus by default when it is created and re-gain it by clicking on the canvas. Clicking anywhere outside of the figure should release focus, but moving the mouse out of the figure should not release focus.\n\n\nUAT 17 - Timers\nSingle-shot timers follow a completely different code path in the nbagg backend than regular timers (such as those used in the animation example above.) The next set of tests ensures that both “regular” and “single-shot” timers work properly.\nThe following should show a simple clock that updates twice a second:\nHowever, the following should only update once and then stop:\nAnd the next two examples should never show any visible text at all:\n\n\nUAT 18 - stopping figure when removed from DOM\nWhen the div that contains from the figure is removed from the DOM the figure should shut down it’s comm, and if the python-side figure has no more active comms, it should destroy the figure. Repeatedly running the cell below should always have the same figure number\nRunning the cell below will re-show the figure. After this, re-running the cell above should result in a new figure number.\n\n\nUAT 19 - Blitting\nClicking on the figure should plot a green horizontal line moving up the axes."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/traitlets-5.5.0.dist-info/licenses/COPYING.html",
    "href": "my_env/lib/python3.7/site-packages/traitlets-5.5.0.dist-info/licenses/COPYING.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Traitlets is adapted from enthought.traits, Copyright (c) Enthought, Inc., under the terms of the Modified BSD License.\nThis project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-, IPython Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the IPython Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe IPython Development Team is the set of all contributors to the IPython project. This includes all of the IPython subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nIPython uses a shared copyright model. Each contributor maintains copyright over their contributions to IPython. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the IPython source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire IPython Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the IPython repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "my_env/lib/python3.7/site-packages/dash_html_components-2.0.0.dist-info/LICENSE.html",
    "href": "my_env/lib/python3.7/site-packages/dash_html_components-2.0.0.dist-info/LICENSE.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "Copyright (c) 2020 Plotly\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "Day2.html#rna-seq-gene-annotation",
    "href": "Day2.html#rna-seq-gene-annotation",
    "title": "Day 2",
    "section": "8. RNA-seq gene annotation",
    "text": "8. RNA-seq gene annotation\nEarlier, we used some different annotation methods to model some genes found in a simple bacterial genome. Now we are going to have a go at using additional data to find genes in a more complicated organism. We will be using a very recent high quality genome for the diamondback moth.\n\n8.1. Data download\nFirst let’s download the genome data:\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/932/276/165/GCF_932276165.1_ilPluXylo3.1/GCF_932276165.1_ilPluXylo3.1_genomic.fna.gz\nand also some RNA seq data (It is pre-downloaded in /home/taller-2019/Workshop_materials/). The tissue that RNA is sampled from is very important. RNA composition varies very dramatically between tissues, developmental stages and environmental conditions. This sample comes from an adult moth, and therefore may not contain genes that are very specific to other stages, such as ovum, caterpillar & pupae.\nfasterq-dump SRR12674277\n\n\n8.2. Mapping\nNow in order to map the RNA-seq reads, we first need to index our genome.\nFirst, decompress the genome:\ngunzip GCF_932276165.1_ilPluXylo3.1_genomic.fna.gz\nThen index like so:\nhisat2-build GCF_932276165.1_ilPluXylo3.1_genomic.fna GCF_932276165.1_ilPluXylo3.1_genomic_hisat2_index\nAfter a few minutes, we should have our genome indexed and ready for mapping. We can map our RNA-seq reads like this:\nhisat2 -S SRR15042536.sam -p 10 --rna-strandness=FR -x $BOWTIE_INDEX -1 $INPUT_R1 -2 $INPUT_R2 --summary-file $OUTOUT_DIR.summary\nNow we need to sort the resulting file and convert it to a compressed bam format (SAM is the human-readable version). We can also index the resulting bam, for visualisation purposes.\nsamtools sort -o SRR15042536.sorted.bam SRR15042536.sam\nsamtools index SRR15042536.sorted.bam\n\n\n8.3. Transcript assembly\nNow that we have our mapped reads, we can use the information to produce some gene models.\nstringtie -o SRR15042536.gff SRR15042536.sorted.bam\nYou can now have a look at the annotation you’ve produced as well as the mapped read and see how the program is able to use RNA alignment evidence to build gene models.\nFirst start IGV by inputting the command:\nigv\nThis should open a new GUI window. First load your genome, by clicking Genomes -> Load Genome From File. Then you can load the sorted.bam file and the gff, by clicking File -> Load from file."
  },
  {
    "objectID": "Day2.html#homology-gene-annotation",
    "href": "Day2.html#homology-gene-annotation",
    "title": "Day 2",
    "section": "9. Homology gene annotation",
    "text": "9. Homology gene annotation\nAn alternative way to infer the presence of a gene is to use amino-acid sequences from closely related organisms. For many important protein sequences, purifying selection eliminates mutations that alter the amino-acid sequence, however coding sequences are still able to accumulate mutations in certain positions due to the fact that more multiple codon sequences are able to code for the same amino-acid.\n\n\n\n\n\nWe will align some proteins for a very fast evolving gene and see how they compare to the RNA-seq data you’ve mapped. Here’ we’ll take a selection of the same protein from different organisms and see how their different levels of evolutionary divergence interferes with the alignment process.\nAligning proteins with miniprot is very simple, the minimal command is:\nminiprot -t8 --gff GCF_932276165.1_ilPluXylo3.1_genomic.fna Masc_multiSpecies_aa.fasta > prot1.gff\nWe can also tweak some of the parameters, and see how it affects the alignment:\nminiprot  -n 3 -s 3 -k 5 -l 3 -j 1 -t8 --gff GCF_932276165.1_ilPluXylo3.1_genomic.fna Masc_multiSpecies_aa.fasta > prot2.gff"
  },
  {
    "objectID": "Day2.html#genome-alignment",
    "href": "Day2.html#genome-alignment",
    "title": "Day 2",
    "section": "7. Genome alignment",
    "text": "7. Genome alignment\nWe are going to download some datasets, you may choose two species from the following list to align:\n\n\n\nName (common)\nNCBI RefSeq accession\n\n\n\n\nMelitaea cinxia (Glanville fritillary)\nGCF_905220565.1\n\n\nPararge aegeria (specked wood butterfly)\nGCF_905163445.1\n\n\nNymphalis io (European peacock)\nGCF_905147045.1\n\n\nVanessa cardui (painted lady)\nGCF_905220365.1\n\n\nLeptidea sinapis (wood white)\nGCF_905404315.1\n\n\nManiola jurtina (meadow brown)\nGCF_905333055.1\n\n\nVanessa atalanta (red admiral)\nGCF_905147765.1\n\n\nPlutella xylostella (diamondback moth)\nGCF_932276165.1\n\n\nPieris rapae (cabbage white)\nGCF_905147795.1\n\n\nPieris brassicae (large cabbage white)\nGCF_905147105.1\n\n\nColias croceus (clouded yellow)\nGCF_905220415.1\n\n\nPapilio machaon (common yellow swallowtail)\nGCF_912999745.1\n\n\nPieris napi (green-veined white)\nGCF_905475465.1\n\n\nAricia agestis (brown argus)\nGCF_905147365.1\n\n\n\nIn section 5.4 we downloaded an E. coli reference genome. You will need to perform this same process for each of your chosen species.\nOnce you have the genomic fasta files downloaded, we can try out a pairwise genomic alignment between two of your species. We’ll use the tool minimap2, which was designed to map long sequences to a genome, such as pacbio reads, however using specific parameters we can also use it to perform alignments between species that are not too distantly related (i.e. within the same Family, or Order).\nUsing two fasta files we can compute a “paf” alignment file (here I use Aricia agestis and Vanessa cardui), like so:\n~/bin/minimap2/minimap2 -PD -x asm5 -t 16 GCF_905147365.1_ilAriAges1.1_genomic.fna GCF_905220365.1_ilVanCard2.1_genomic.fna  > AriAges_VanCard.paf\nWe can then use an R script to convert this alignment into a dotplot style figure. This type of figure represents a query genome on one axis and a target genome on the other axis. Dots correspond to matches between the two sets of sequences. Some dots will appear across many different chromosomes, these matches are likely to correspond to repetitive sequences such as transposable elements. Other matches form intermittent diagonal lines, and are likely to represent orthologous regions of the genome. When the angles of these diagonal lines change direction, they may represent “inversion” polymorphisms. This type of polymorphism occurs, when a large section of a chromosome flips-over (inverts), due to a breakage and erroneous repair.\n~/bin/dotPlotly/pafCoordsDotPlotly.R -i ColCroc_AriAges.paf -o ColCroc_AriAges.out -s -t -m 1500 -q 500000"
  },
  {
    "objectID": "Day3.html",
    "href": "Day3.html",
    "title": "Day 3",
    "section": "",
    "text": "In the previous sessions, we’ve had some hands on time running different programs and hopefully gaining an idea of the types of information we can extract from genomic data. Today I would like you to split into groups and attempt to formulate an evolutionary hypothesis that could be investigated using genomic data and the methods we have covered. Alternatively, you may have your own datasets you are working on, this could be an opportunity to ask for advice on how to investigate specific questions you are interested in, and I can try and give advice if possible.\nYou’ve learned how to use genomic data to estimate heterozygosity for an organism, how to look for endosymbiotic bacteria, how to find genes and organise them into orthologous groups and trees. You’ve also learned how to compare genomes at a chromosome level. Using the DToL Lepidoptera species, we can think about linking these types of data across multiple species to a database of ecological traits. This database includes data on long and short term population size trends, host-plant specificity, phenological shifts and more!\nYou don’t have to worry about completing the project rigorously, this is simply an opportunity to begin thinking about how genomic data can be applied to ask biological questions\nIf you don’t have your own dataset, or find it difficult to think of a question, here are some example hypotheses you could think about:\n\nDo long term population declines predict reduced levels of heterozygosity? (paper)\nDo polyphagous species have greater numbers of duplicated genes? (paper)\nDo species that pupate in shared environments share similar endosymbionts? (paper)\nDo closely related species have similar genome size? (paper)\n\nYou will need to think about how you will gather the genomic and ecological data, and how your resulting graphs might look."
  },
  {
    "objectID": "Day2.html#homology-gene-clustering",
    "href": "Day2.html#homology-gene-clustering",
    "title": "Day 2",
    "section": "10. Homology gene clustering",
    "text": "10. Homology gene clustering\nThe determination of shared ancestry between genes in divergent species is a complex process. Reproductive isolation and other processes lead to varying levels of sequence divergence along different branches of an evolutionary tree. Genes may also become duplicated or rearranged, gain or lose specific functions. Interestingly, the evolutionary history of individual genes, may be radically different from a species tree, due to processes such as Incomplete lineage sorting, trans-species polymorphism (e.g. via balancing selection) and molecular convergence (see here). Thus, we may need to compare the trees of many genes to assess the true evolutionary tree of the species themselves.\nA useful program orthofinder, provides many of these functions in an automated tool. Let’s download some protein data for five of the butterfly species in the table above (more species will take more time to run).\n\nFirst make a new directory called orthofinder_1 and move into that folder.\nmkdir orthofinder_1\ncd orthofinder_1\nThen, navigate to the FTP site for each species using the links above, then right click and copy the link to the “_protein.faa.gz” files. Use the wget command to copy the data into the new folder like so:\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/905/220/565/GCF_905220565.1_ilMelCinx1.1/GCF_905220565.1_ilMelCinx1.1_protein.faa.gz\nDecompress the protein files like this:\nGCF_905220565.1_ilMelCinx1.1_protein.faa.gz\nOnce all the files are decompressed, you can run orthofinder like this:\northofinder -f ~/orthofinder_1\nThis might take a little bit of time (there is a pre-computed output folder in the /home/taller-2019/Workshop_materials/ folder), but once complete, it is worth looking through the resulting output files (see here). In particular you should now have a resolved species tree, and also trees for all genes in the inferred orthogroups. A simple way of viewing this data is to paste it into this website."
  }
]