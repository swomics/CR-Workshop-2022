[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "¡Bienvenido!",
    "section": "",
    "text": "Welcome to the 2022 Genomics workshop!\nby Samuel Whiteford & Stefany Solano-Gonzalez\nDuring this course we aim to cover some important bioinformatic methods and give you the following skills and knowledge:\n\nYou will understand the importance of sampling and experimental design in genome sequencing experiments.\nYou will understand the difference between DNA sequencing technologies, their advantages and disadvantages and will have some understanding of how to check for problems in your data.\nYou will be able to navigate a Unix environment and understand how to access and run various bioinformatics packages.\nYou will be able to analyse and annotate a single genomic sequence to facilitate further studies and address specific hypotheses.\nYou will be able to compare different species to address specific hypotheses."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Day1.html",
    "href": "Day1.html",
    "title": "Day 1 - Genomics Overview",
    "section": "",
    "text": "Today we will be discussing and performing Genome assembly. Assembly refers to the translation of raw sequencing data into a representation of the source DNA genome. You will learn about the types of data and algorithms you can use to accomplish this, their advantages and disadvantages and how you might accomplish this. Since this is the first day of the workshop, we will also spend some time covering the Unix command line environment and how you can interact with it during this workshop.\n1. Logging on to the computing environment\n2. DNA sequence data: Platforms & Formats\n3. DNA sequence data: Pre-Assembly QC\n4. DNA sequence data: Assembly\n5. DNA sequence data: Post-Assembly QC"
  },
  {
    "objectID": "k-means/app.html",
    "href": "k-means/app.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "title: “Old Faithful”\nformat:\nhtml:\ncode-tools:\nsource: https://github.com/quarto-dev/quarto-web/tree/main/docs/interactive/shiny/_examples/old-faithful/shiny-old-faithful.qmd\nserver: shiny\n---\nData on eruptions of the Old Faithful geyser in Yellowstone National Park,\nWyoming, USA. The data was collected continuously from August 1st until\nAugust 15th, 1985.\n```{r}\nsliderInput(“bins”, “Number of bins:”, min = 1, max = 50, value = 30)\nplotOutput(“distPlot”)\n```\nThe data consists of 299 pairs of measurements, referring to the time interval\nbetween the starts of successive eruptions and the duration of the subsequent\neruption.\nClick the **Code** button above to see the source code for this example.\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\nx <- faithful[, 2] # Old Faithful Geyser data\nbins <- seq(min(x), max(x), length.out = input$bins + 1)\nhist(x, breaks = bins, col = ‘darkgray’, border = ‘white’)\n})\n```"
  },
  {
    "objectID": "k-means/app_test.html",
    "href": "k-means/app_test.html",
    "title": "Genomics Workshop 2022",
    "section": "",
    "text": "title: “Old Faithful”\nformat: html\nserver: shiny\n---\n```{r}\nsliderInput(“bins”, “Number of bins:”,\nmin = 1, max = 50, value = 30)\nplotOutput(“distPlot”)\n```\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\nx <- faithful[, 2] # Old Faithful Geyser data\nbins <- seq(min(x), max(x), length.out = input$bins + 1)\nhist(x, breaks = bins, col = ‘darkgray’, border = ‘white’)\n})\n```"
  },
  {
    "objectID": "Day1.html#logging-on-to-the-computing-environment",
    "href": "Day1.html#logging-on-to-the-computing-environment",
    "title": "Day 1 - Genomics Overview",
    "section": "1. Logging on to the computing environment",
    "text": "1. Logging on to the computing environment\nTBC"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-platforms-formats",
    "href": "Day1.html#dna-sequence-data-platforms-formats",
    "title": "Day 1 - Genomics Overview",
    "section": "2. DNA sequence data: Platforms & Formats",
    "text": "2. DNA sequence data: Platforms & Formats\nThe ultimate goal of whole genome sequencing is to reconstruct the genetic state within an organism, exactly as it occurs in vivo. This means the complete uninterrupted base-pair sequence of any chromosomes, including mitochondrial genomes and potentially any endosymbiotic organisms. At the time of writing, the best technology we have can only “read” DNA molecules in continuous sections of varying lengths (and with varying accuracy). These sub-samples of larger genome molecules canbe reconstructed to describe the larger sequence, this is called de novo genome assembly.\nThe data properties of these DNA “sequencing reads” depends on the technology used to generate them. DNA sequencing technology has been subject to many different fundamental technical advances. Broadly speaking, as of 2022, there are three dominant platforms: Sequencing by synthesis (Illumina), Single molecule real-time (PacBio) and nanopore sensing (Oxford Nanopore Technologies). The output of these different platforms differ by three key parameters 1) cost per base-pair 2) error-profile and 3) read-length.\nBelow you can see an interactive plot of different data sets in the Sequence Read Archive (SRA), highlighting differences in read length produced by the different platforms. A recent review of genome assemblies for Lepidopteran (butterfly/moth) genomes suggested that PacBio HiFi data is currently the best performing approach for assembly (Ellis et al., 2021). We will come back to this in the assembly section below.\n\nFigure 1: A comparative overview of different DNA sequencing technologies (restricted to Order: Lepidoptera datasets)"
  },
  {
    "objectID": "Day1.html#dna-sequence-data-pre-assembly-qc",
    "href": "Day1.html#dna-sequence-data-pre-assembly-qc",
    "title": "Day 1 - Genomics Overview",
    "section": "3. DNA sequence data: Pre-Assembly QC",
    "text": "3. DNA sequence data: Pre-Assembly QC\nThe type of sequencing and assembly you may want to do can depend on your study organism. Some species have intrinsically more or less complex genomes. There are a few important considerations that can inform your strategy, but sometimes it is difficult to know what these may be without data. Some major considerations are; sequencing coverage, ploidy, heterozygosity, repeat density and repeat structure.\n\nSequencing coverage\nSequencing coverage is the number of times that any given base-pair in your genome appears in your sequencing read data. Put another way, it is the ratio of sequence read data to actual genome size, so if we imagine a 100Mbp haploid genome and we have 1Gbp of sequencing data, we would estimate that we have a sequencing coverage of 10. In practice, this estimate is usually roughly accurate for the median coverage value, but due to the random probability of sampling in combination with sequencing bias, coverage varies according to a distribution.\n\n\nPloidy\nPloidy refers to the number of chromosome copies that an organism has. A single copy is haploid, two copies of a chromosome is diploid (most sexually reproducing organisms are diploid), however higher numbers of copies (the general term is polyploid) are commonly found in nature, particularly in plants.\nIt is important to note that different ploidy states can exist within an organism - In humans for example, the autosomes are most often diploid, the mitochondrial genome is most often haploid, and the X chromosome can be either haploid or diploid.\nIn addition, ploidy levels can vary between different tissues. Some cells found in the liver are normally polyploid and karyotype alterations have also been linked to cancerous tissues. In another case, Honey bees can have entirely haploid autosomes (which initiates male development) or diploid autosomes (which initiates female development) (Aamidor et al., 2018). Choosing which individual and tissue to sample for whole genome sequencing is a crucial decision!\n\n\n\n\n\n\n\n\nRepeat density & Repeat structure\nOne useful initial QC procedure to follow is to break down sequencing reads into short (for instance 21bp) overlapping sub-strings called k-mers (in this case we would call them 21-mers) to allow us to get a more accurate assessment of genomic coverage. k-mers are useful because some sequencing reads contain errors. By breaking down reads into sub-strings, we ensure that even when there is an error present in the read, we can still get information from the surrounding error-free sequence."
  },
  {
    "objectID": "Day1.html#dna-sequence-data-assembly",
    "href": "Day1.html#dna-sequence-data-assembly",
    "title": "Day 1 - Genomics Overview",
    "section": "4. DNA sequence data: Assembly",
    "text": "4. DNA sequence data: Assembly\nThere are a number of algorithms that can be used to reconstruct genomic sequence from reads. Two of the most common are the de brujn graph, which utilises overlapping fixed-length k-mers to reconstruct the sequence. As previously discussed, k-mers have some useful properties for assembly, however they cannot resolve sequences that are repeated throughout the genome if they are longer then k (for example transposable elements).\n\nstring <- \"This is an example using a sentence instead of DNA sequence\"\n\n#pick a mer length (7-mer)\nkmer_length <- 7\n#subtract one for getting correct slice indices\nslice_length <- kmer_length-1\n\n#loop through every position in the string to generate k-mers\nfor (i in seq(1,nchar(string)-kmer_length))\n{\n  #calculate some whitespace padding for visualising\n  padding <- paste(rep(\" \", i),collapse = '')\n  print(paste(padding,substr(string, i, i+slice_length)))\n}\n\n[1] \"  This is\"\n[1] \"   his is \"\n[1] \"    is is a\"\n[1] \"     s is an\"\n[1] \"       is an \"\n[1] \"       is an e\"\n[1] \"        s an ex\"\n[1] \"          an exa\"\n[1] \"          an exam\"\n[1] \"           n examp\"\n[1] \"             exampl\"\n[1] \"             example\"\n[1] \"              xample \"\n[1] \"               ample u\"\n[1] \"                mple us\"\n[1] \"                 ple usi\"\n[1] \"                  le usin\"\n[1] \"                   e using\"\n[1] \"                     using \"\n[1] \"                     using a\"\n[1] \"                      sing a \"\n[1] \"                       ing a s\"\n[1] \"                        ng a se\"\n[1] \"                         g a sen\"\n[1] \"                           a sent\"\n[1] \"                           a sente\"\n[1] \"                             senten\"\n[1] \"                             sentenc\"\n[1] \"                              entence\"\n[1] \"                               ntence \"\n[1] \"                                tence i\"\n[1] \"                                 ence in\"\n[1] \"                                  nce ins\"\n[1] \"                                   ce inst\"\n[1] \"                                    e inste\"\n[1] \"                                      instea\"\n[1] \"                                      instead\"\n[1] \"                                       nstead \"\n[1] \"                                        stead o\"\n[1] \"                                         tead of\"\n[1] \"                                          ead of \"\n[1] \"                                           ad of D\"\n[1] \"                                            d of DN\"\n[1] \"                                              of DNA\"\n[1] \"                                              of DNA \"\n[1] \"                                               f DNA s\"\n[1] \"                                                 DNA se\"\n[1] \"                                                 DNA seq\"\n[1] \"                                                  NA sequ\"\n[1] \"                                                   A seque\"\n[1] \"                                                     sequen\"\n[1] \"                                                     sequenc\"\n\n\nAlternatively, the Overlap Layout Consensus (OLC) method can be used which looks for overlaps between whole reads rather than the sub-sampled k-mers. As technological advance have enabled longer read lengths, OLC methods have become a favorable method, since they can bridge repetitive sequences and therefore reconstruct longer contiguous sequences.\n\nstring <- \"This is an example using a sentence instead of DNA sequence\"\ntotal_reads <- 20\n\nfixed_read_length <- 6\n\n# get some random starting positions for the reads\nread_indices <-sample(1:nchar(string),total_reads)\n\n# loop through the starting positions\nfor (i in sort(read_indices))\n{\n  #sample the exponential distribution\n  exp_var <- rexp(1)\n  #use exp to generate variable read lengths\n  variable_read_length <- fixed_read_length * round(1+exp_var)\n  #calculate some whitespace padding for visualising\n  padding <- paste(rep(\" \", i-1),collapse = '')\n  print(paste(padding,substr(string, i, i+variable_read_length)))\n}\n\n[1] \"  his is \"\n[1] \"       s an example using \"\n[1] \"            example using a sentence\"\n[1] \"              ample using a\"\n[1] \"                 le using a se\"\n[1] \"                    using a\"\n[1] \"                     sing a sentence ins\"\n[1] \"                        g a sentence \"\n[1] \"                          a sent\"\n[1] \"                                ence in\"\n[1] \"                                 nce ins\"\n[1] \"                                  ce instead of\"\n[1] \"                                   e instead of \"\n[1] \"                                       stead of DNA sequence\"\n[1] \"                                         ead of DNA sequence\"\n[1] \"                                          ad of DNA seq\"\n[1] \"                                                 NA sequence\"\n[1] \"                                                    sequenc\"\n[1] \"                                                      quence\"\n[1] \"                                                          ce\""
  },
  {
    "objectID": "Day1.html#dna-sequence-data-post-assembly-qc",
    "href": "Day1.html#dna-sequence-data-post-assembly-qc",
    "title": "Day 1 - Genomics Overview",
    "section": "5. DNA sequence data: Post-Assembly QC",
    "text": "5. DNA sequence data: Post-Assembly QC\nTBC\n\nReferences:\n[1] E. A. Ellis, C. G. Storer, and A. Y. Kawahara, “De novo genome assemblies of butterflies,” Gigascience, vol. 10, no. 6, pp. 1–8, 2021.\n[2] S. Celton-Morizur and C. Desdouets, Polyploidization of liver cells, vol. 676. 2010.\n[3] S. E. Aamidor, B. Yagound, I. Ronai, and B. P. Oldroyd, “Sex mosaics in the honeybee: How haplodiploidy makes possible the evolution of novel forms of reproduction in social Hymenoptera,” Biol. Lett., vol. 14, no. 11, 2018."
  }
]