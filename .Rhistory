install.packages(gganimate)
install.packages("gganimate")
install.packages("ggmap")
?get_stamenmap
??get_stamenmap
mapImage <- get_stamenmap(bbox = c(left = -30, bottom = -33, right = 31,top = -25), zoom = 8, maptype = c("watercolor"),force=T)
library(ggmap)
mapImage <- get_stamenmap(bbox = c(left = -30, bottom = -33, right = 31,top = -25), zoom = 8, maptype = c("watercolor"),force=T)
mapImage <- get_stamenmap(bbox = c(left = -30, bottom = -33, right = 31,top = -25), zoom = 6, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -30, bottom = 0, right = 31,top = 20), zoom = 6, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -50, bottom = 0, right = 31,top = 38), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -80, bottom = 30, right = 31,top = 50), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -100, bottom = 30, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -120, bottom = 20, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -120, bottom = 10, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + theme_bw()
Points2 <- Points %>% group_by(group = lon %in% range(lon)) %>%
# summarize lat and lon for each group into a list of a sequence from the first to the second
summarise_each(funs(list(seq(.[1], .[2], length.out = 10)))) %>%
# expand list columns with tidyr::unnest
unnest()
library(dplyr)
library(tidyr)
# group rows by opposite pairs
Points2 <- Points %>% group_by(group = lon %in% range(lon)) %>%
# summarize lat and lon for each group into a list of a sequence from the first to the second
summarise_each(funs(list(seq(.[1], .[2], length.out = 10)))) %>%
# expand list columns with tidyr::unnest
unnest()
Points <- data.frame(ID=c("Liverpool","Costa Rica"),lon=c(53.4121774,9.9355152),lat=c(-2.9160587,-84.2567069))
library(dplyr)
library(tidyr)
# group rows by opposite pairs
Points2 <- Points %>% group_by(group = lon %in% range(lon)) %>%
# summarize lat and lon for each group into a list of a sequence from the first to the second
summarise_each(funs(list(seq(.[1], .[2], length.out = 10)))) %>%
# expand list columns with tidyr::unnest
unnest()
lons <- seq(from = 53.4121774, to = 9.9355152, length.out = 100)
lats <- seq(from = -2.9160587, to = -84.2567069, length.out = 100)
df2 <- data.frame(lons=lons, lats=lats)
View(df2)
ggmap(mapImage) + geom_points(data=df2,aes(x=lons,y=lats)) + theme_bw()
library(ggplot2)
ggmap(mapImage) + geom_points(data=df2,aes(x=lons,y=lats)) + theme_bw()
ggmap(mapImage) + geom_point(data=df2,aes(x=lons,y=lats)) + theme_bw()
ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 8, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + geom_point(data=df2,aes(x=lons,y=lats)) + theme_bw()
ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 0, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
df2$time <- row.names(df2)
View(df2)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
p + transition_time(df2$time)
library(gganimate)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
p + transition_time(df2$time)
df2$time <- as.numeric(row.names(df2))
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 0, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
p + transition_time(df2$time)
?anim_save()
anim_save()
install.packages("gifski")
library(gifski)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
p + transition_time(df2$time)
anim_save("test.gif")
lons <- seq(from = 53.4121774, to = 9.9355152, length.out = 50)
lats <- seq(from = -2.9160587, to = -84.2567069, length.out = 50)
df2 <- data.frame(lons=lons, lats=lats)
df2$time <- as.numeric(row.names(df2))
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 0, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
p + transition_time(df2$time)
q <- p + transition_time(df2$time)
anim_save("map.gif", q)
library(ggmap)
library(gganimate)
library(gifski)
Points <- data.frame(ID=c("Liverpool","Costa Rica"),lon=c(53.4121774,9.9355152),lat=c(-2.9160587,-84.2567069))
lons <- seq(from = 53.4121774, to = 9.9355152, length.out = 50)
lats <- seq(from = -2.9160587, to = -84.2567069, length.out = 50)
df2 <- data.frame(lons=lons, lats=lats)
df2$time <- as.numeric(row.names(df2))
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 0, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats)) + theme_bw()
q <- p + transition_time(df2$time)
anim_save("map.gif", q)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="goldenrod",size=3) + theme_bw()
q <- p + transition_time(df2$time) + shadow_wake(wake_length = 0.1, alpha = FALSE)
anim_save("map.gif", q)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="darkred",size=6) + theme_bw()
q <- p + transition_time(df2$time) + shadow_wake(wake_length = 0.1, alpha = FALSE)
anim_save("map.gif", q)
q <- p + transition_time(df2$time) + shadow_wake(wake_length = 0.2, alpha = FALSE)
anim_save("map.gif", q)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="darkred",size=6) + theme_black()
set_theme(theme_bw); defaultcol = "black"
set_theme
??set_theme
devtools::install_github("nsgrantham/ggdark")
install.packages("devtools")
devtools::install_github("nsgrantham/ggdark")
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="darkred",size=6) + dark_theme_gray()
]lilibrary(ggdark)
library(ggdark)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="darkred",size=6) + dark_theme_gray()
q <- p + transition_time(df2$time) + shadow_wake(wake_length = 0.2, alpha = FALSE)
anim_save("map.gif", q)
Points <- data.frame(ID=c("Liverpool","Costa Rica"),lon=c(53.4121774,9.9355152),lat=c(-2.9160587,-84.2567069))
lons <- seq(from = 53.4121774, to = 9.9355152, length.out = 50)
lats <- seq(from = -2.9160587, to = -84.2567069, length.out = 50)
df2 <- data.frame(lons=lons, lats=lats)
df2$time <- as.numeric(row.names(df2))
mapImage <- get_stamenmap(bbox = c(left = -110, bottom = 0, right = 31,top = 60), zoom = 4, maptype = c("watercolor"),force=T)
p <- ggmap(mapImage) + geom_point(data=df2,aes(y=lons,x=lats),col="darkred",size=6) + theme_bw()
q <- p + transition_time(df2$time) + shadow_wake(wake_length = 0.2, alpha = FALSE)
anim_save("Resources/map.gif", q)
install.packages("rmarkdown")
shiny::runApp('coverage')
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
1 + 1
library(shiny)
shinyAppDir(system.file("./k-means", package = "shiny"),
options = list(width = "100%", height = 550   )
)
library(shiny)
shinyAppDir(system.file("./k-means/app.R", package = "shiny"),
options = list(width = "100%", height = 550   )
)
library(shiny)
shinyAppDir(system.file("./k-means/app.R", package = "shiny"),
options = list(width = "100%", height = 550   )
)
?shinyAppDir
library(shiny)
shinyAppDir("./k-means",
options = list(width = "100%", height = 550   )
)
bins <- seq(min(x), max(x), length.out = input$bins + 1)
install.packages("gapminder")
library(plotly)
library(gapminder)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
install.packages("stringr")
install.packages("stringr")
df <- read.csv("SraRunInfo.csv",header=T)
df$val <- str_split(ReleaseDate, "-")[[1]]
library(stringr)
df$val <- str_split(ReleaseDate, "-")[[1]]
df$val <- str_split(df$ReleaseDate, "-")[[1]]
df$val <- str_split(df$ReleaseDate, "-")[1]
head(df)
df$val <- str_split(df$ReleaseDate, "-")
head(df)
df$val <- str_split(df$ReleaseDate, ",")
head(df)
df$val <- str_split(df$ReleaseDate, "-")[,1]
df$val <- str_split(df$ReleaseDate, "-")[1]
head(df)
df$val <- str_split(df$ReleaseDate, "-")[[1]]
df$val <- str_split(df$ReleaseDate, "-")[[2]]
df$val <- str_split(df$ReleaseDate, "-")[1][1]
head(df)
df$val <- str_split(df$ReleaseDate, "-")[[1]][1]
head(df)
library(gapminder)
df <- gapminder
head(df)
head(df)
df <- read.csv("SraRunInfo.csv",header=T)
df$val <- as.integer(str_split(df$ReleaseDate, "-")[[1]][1])
head(df)
levels(df$val)
unique(df$val)
df <- read.csv("SraRunInfo.csv",header=T)
df$val <- as.integer(str_split(df$LoadDate, "-")[[1]][1])
unique(df$val)
as.numeric(str_split(df$ReleaseDate, "-")[[1]])
as.numeric(str_split(df$ReleaseDate, "-")[])
as.numeric(str_split(df$ReleaseDate, "-")[1])
as.numeric(str_split(df$ReleaseDate, "-")[[1]])
as.numeric(str_split_fixed(df$ReleaseDate, "-",1))
as.numeric(str_split_fixed(df$ReleaseDate, "-",1)[1])
as.numeric(str_split_fixed(df$ReleaseDate, "-"))
as.numeric(str_split_fixed(df$ReleaseDate, "-",2))
length(df$Run)
length(df$val)
head(df$val)
unique(df$val)
df$val <- as.numeric(str_split_fixed(df$ReleaseDate, "-",2))
unique(df$val)
length(as.numeric(str_split_fixed(df$ReleaseDate, "-",2)))
length(as.numeric(str_split_fixed(df$ReleaseDate, "-",2))[1])
length(as.numeric(str_split_fixed(df$ReleaseDate, "-",2)))
df <- read.csv("SraRunInfo.csv",header=T)
df$val <- as.numeric(str_split_fixed(df$ReleaseDate, "-",2))
lrngth(row.names(df))
length(row.names(df))
length(gsub("-.*", "", df$ReleaseDate) )
df$val <- gsub("-.*", "", df$ReleaseDate)
df <- read.csv("SraRunInfo.csv",header=T)
length(gsub("-.*", "", df$ReleaseDate) )
library(adegenet)
